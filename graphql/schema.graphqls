schema {
  query: ApplicationQueries
  mutation: ApplicationMutations
}

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

interface ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  updatedAt: Int
  updatedAtIso: String
}

interface Addresses {
  addresses: [AddressesStreet!]
  emails: [AddressesEmail!]
  phones: [AddressesPhone!]
  urls: [AddressesURL!]
}

type AddressesEmail implements ActiveRecord {
  address: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  label: String
  updatedAt: Int
  updatedAtIso: String
}

input AddressesEmailInput {
  address: String!

  """default(main)"""
  label: String
}

type AddressesPhone implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  label: String
  number: String
  updatedAt: Int
  updatedAtIso: String
}

input AddressesPhoneInput {
  number: String!

  """default(main)"""
  label: String
}

type AddressesStreet implements ActiveRecord {
  address: String
  city: String
  country: String
  county: String
  createdAt: Int
  createdAtIso: String

  """City, State ZIP"""
  csz: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  label: String
  lat: Float

  """Street Address"""
  line1: String

  """City, State ZIP"""
  line2: String
  lng: Float
  postalCode: String
  state: String
  street: String
  updatedAt: Int
  updatedAtIso: String
  zip: String
}

input AddressesStreetInput {
  fullAddress: String
  street: String
  street2: String
  city: String
  state: String
  zip: String
  postalCode: String
  county: String
  country: String
  lat: Float
  lng: Float
  geocode: Boolean

  """default(main)"""
  label: String

  """default(false)"""
  remove: Boolean
}

input AddressesStreetUpdateInput {
  id: ID!
  street: String
  street2: String
  city: String
  state: String
  zip: String
  postalCode: String
  lat: Float
  lng: Float
}

"""Autogenerated return type of AddressesStreetUpdate."""
type AddressesStreetUpdatePayload {
  errors: [Error!]
  result: AddressesStreet
  success: Boolean
}

type AddressesURL implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  label: String
  updatedAt: Int
  updatedAtIso: String
  url: String
}

input AddressesURLInput {
  url: String!

  """default(main)"""
  label: String
}

type Agreement implements ActiveRecord & State {
  allActions: [String!]
  availableActions: [String!]
  createdAt: Int
  createdAtIso: String
  docHtml: String
  docMarkdown: String

  """Whether the current user is eligible for this assessment or not"""
  eligible: Boolean

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  healthSnapCount: Int
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): HealthSnapConnection
  id: ID
  kind: String

  """
  Date the current user last took this assessment for the current organization
  """
  lastTakenDate: String
  name: String
  organization: Organization
  requirement: String
  source: String
  states: [String!]
  status: String
  uid: String
  updatedAt: Int
  updatedAtIso: String
  version: Int
}

"""Autogenerated return type of AgreementActivate."""
type AgreementActivatePayload {
  agreement: Agreement
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of AgreementArchive."""
type AgreementArchivePayload {
  agreement: Agreement
  errors: [Error!]
  success: Boolean
}

"""The connection type for Agreement."""
type AgreementConnection {
  """A list of edges."""
  edges: [AgreementEdge]

  """A list of nodes."""
  nodes: [Agreement]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated return type of AgreementDeactivate."""
type AgreementDeactivatePayload {
  agreement: Agreement
  errors: [Error!]
  success: Boolean
}

"""An edge in a connection."""
type AgreementEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Agreement
}

input AgreementUpdateInput {
  id: ID!
  name: String
  uid: String
  kind: String
  source: String
  requirement: String
}

"""Autogenerated return type of AgreementUpdate."""
type AgreementUpdatePayload {
  agreement: Agreement
  errors: [Error!]
  success: Boolean
}

type Answer implements Period {
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  createdAt: String
  data: [String!]
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")
  id: ID
  key: String!
  labels: [String!]
  names: [String!]
  note: AnswerNote
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  source: DataValueSource
  units: [String!]
}

input AnswerInput {
  key: String!

  """Use for multiple values, or single value in an array"""
  data: [String!]

  """Use for a single value"""
  datum: String
  units: [String!]

  """Use for a single unit"""
  unit: String
  beginEpoch: Int
  endEpoch: Int
  note: AnswerNoteInput
  source: DataValueSourceInput
}

type AnswerNote {
  author: User
  body: String!
  id: ID
  private: Boolean
  subject: ID
  subjectType: String
}

input AnswerNoteInput {
  body: String
  author: ID
  private: Boolean
}

type Application {
  metricCategories: [String!]
  metricInfo(key: String!): Metric
  metrics(category: String, categories: [String!]): [Metric!]
  modules: [Module!]
  scorers: [Scorer!]

  """Return the current API version"""
  version: String!
}

"""Autogenerated return type of ApplicationConvert."""
type ApplicationConvertPayload {
  errors: [Error!]
  result: String
  success: Boolean
}

type ApplicationMutations {
  agreementActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AgreementActivatePayload
  agreementArchive(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AgreementArchivePayload
  agreementDeactivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AgreementDeactivatePayload
  agreementUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AgreementUpdateInput
  ): AgreementUpdatePayload
  apptBook(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentBookPayload
  apptCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentCancelPayload
  apptCheckIn(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentCheckInPayload
  apptConfirm(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentConfirmPayload
  apptCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AppointmentCreateInput
  ): AppointmentCreatePayload
  apptFinish(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentFinishPayload
  apptIgnore(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentIgnorePayload
  apptLeft(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentLeftPayload
  apptNoShow(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentNoShowPayload
  apptReadyForRoom(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentReadyForRoomPayload
  apptSendToRoom(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AppointmentSendToRoomInput
  ): AppointmentSendToRoomPayload
  apptStart(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentStartPayload
  apptUndoState(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AppointmentUndoStatePayload
  apptUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AppointmentUpdateInput
  ): AppointmentUpdatePayload
  assessmentActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AssessmentActivatePayload
  assessmentArchive(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AssessmentArchivePayload
  assessmentDeactivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AssessmentDeactivatePayload
  assessmentUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AssessmentUpdateInput
  ): AssessmentUpdatePayload
  attachmentCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AttachmentCreateInput
  ): AttachmentCreatePayload
  attachmentRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): AttachmentRemovePayload
  careplanAccept(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanAcceptInput
  ): CarePlanAcceptPayload
  careplanAssign(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanAssignInput
  ): CarePlanAssignPayload
  careplanCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): CarePlanCancelPayload
  careplanComplete(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): CarePlanCompletePayload
  careplanCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanCreateInput
  ): CarePlanCreatePayload
  careplanRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): CarePlanRemovePayload
  careplanUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanUpdateInput
  ): CarePlanUpdatePayload
  contributorActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanContributorInput
  ): CarePlanContributorActivatePayload
  contributorAdd(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanContributorAddInput
  ): CarePlanContributorAddPayload
  contributorArchive(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanContributorInput
  ): CarePlanContributorArchivePayload
  contributorRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: CarePlanContributorInput
  ): CarePlanContributorRemovePayload
  conversationCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingConversationCreateInput
  ): MessagingConversationCreatePayload

  """Convert a value in one unit to a different unit"""
  convert(value: String, fromUnit: String, toUnit: String, precision: Int): ApplicationConvertPayload
  deviceRegister(
    auth: String

    """Organization ID"""
    orgId: ID
    input: DeviceRegisterInput
  ): DeviceRegisterPayload
  deviceUnregister(
    auth: String

    """Organization ID"""
    orgId: ID
    input: DeviceUnregisterInput
  ): DeviceUnregisterPayload
  healthNoteClose(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteCloseInput
  ): HealthNoteClosePayload
  healthNoteCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteCreateInput
  ): HealthNoteCreatePayload
  healthNoteOpen(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteCreateInput
  ): HealthNoteCreatePayload
  healthNoteRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthNoteRemovePayload
  healthNoteSectionCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteSectionCreateInput
  ): HealthNoteSectionCreatePayload
  healthNoteSectionRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthNoteSectionRemovePayload
  healthNoteSectionUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteSectionUpdateInput
  ): HealthNoteSectionUpdatePayload
  healthNoteUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthNoteUpdateInput
  ): HealthNoteUpdatePayload
  healthOrderClose(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderCloseInput
  ): HealthOrderClosePayload
  healthOrderCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderCreateInput
  ): HealthOrderCreatePayload
  healthOrderOpen(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderCreateInput
  ): HealthOrderCreatePayload
  healthOrderRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthOrderRemovePayload
  healthOrderSectionCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderSectionCreateInput
  ): HealthOrderSectionCreatePayload
  healthOrderSectionRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthOrderSectionRemovePayload
  healthOrderSectionUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderSectionUpdateInput
  ): HealthOrderSectionUpdatePayload
  healthOrderUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthOrderUpdateInput
  ): HealthOrderUpdatePayload
  healthsnapCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthSnapCancelPayload
  healthsnapClose(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthSnapClosePayload
  healthsnapOpen(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthSnapOpenInput
  ): HealthSnapOpenPayload
  healthsnapScore(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): HealthSnap
  healthsnapStore(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthSnapStoreInput
  ): HealthSnapStorePayload

  """Change name of HealthSnap"""
  healthsnapUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: HealthSnapUpdateInput
  ): HealthSnapUpdatePayload
  insuranceCardCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsuranceCardCreateInput
  ): InsuranceCardCreatePayload
  insuranceCardRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): InsuranceCardRemovePayload
  insuranceCardUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsuranceCardUpdateInput
  ): InsuranceCardUpdatePayload
  insuranceCarrierCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsuranceCarrierCreateInput
  ): InsuranceCarrierCreatePayload
  insuranceCarrierRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): InsuranceCarrierRemovePayload
  insuranceCarrierUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsuranceCarrierUpdateInput
  ): InsuranceCarrierUpdatePayload

  """
  supply carrier_id if known, or carrier_name to find or create by name (case-insensitive)
  """
  insurancePlanCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsurancePlanCreateInput
  ): InsurancePlanCreatePayload
  insurancePlanRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): InsurancePlanRemovePayload
  insurancePlanUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: InsurancePlanUpdateInput
  ): InsurancePlanUpdatePayload
  login(input: UserLoginInput!): UserLoginPayload
  loginAuth0(input: UserLoginAuth0Input): UserLoginAuth0Payload
  messagePost(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingMessagePostInput
  ): MessagingMessagePostPayload
  messageRead(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingMessageMarkReadInput
  ): MessagingMessageMarkReadPayload
  monitorCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MetricMonitorCreateInput
  ): MetricMonitorCreatePayload
  monitorRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MetricMonitorInput
  ): MetricMonitorRemovePayload
  monitorUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MetricMonitorUpdateInput
  ): MetricMonitorUpdatePayload
  ncMetricFaker(
    auth: String

    """Organization ID"""
    orgId: ID
    input: NCMetricFakerInput
  ): NCMetricFakerPayload
  notificationCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: UserNotificationCreateInput
  ): UserNotificationCreatePayload
  notificationMarkRead(
    auth: String

    """Organization ID"""
    orgId: ID
    input: UserNotificationMarkReadInput
  ): UserNotificationMarkReadPayload
  notificationRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): UserNotificationRemovePayload
  notificationUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: UserNotificationUpdateInput
  ): UserNotificationUpdatePayload
  orgCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: OrganizationCreateInput
  ): OrganizationCreatePayload
  orgRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): OrganizationRemovePayload
  orgUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: OrganizationUpdateInput
  ): OrganizationUpdatePayload
  participantActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingParticipantInput
  ): MessagingParticipantActivatePayload
  participantAdd(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingParticipantAddInput
  ): MessagingParticipantAddPayload
  participantArchive(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingParticipantInput
  ): MessagingParticipantArchivePayload
  participantRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: MessagingParticipantInput
  ): MessagingParticipantRemovePayload
  providerAddService(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ProviderServiceInput
  ): ProviderAddPayload
  providerNonWorkTimeCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ProviderNonWorkTimeCreateInput
  ): ProviderNonWorkTimeCreatePayload
  providerNonWorkTimeRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ProviderNonWorkTimeRemovePayload
  providerNonWorkTimeUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ProviderNonWorkTimeUpdateInput
  ): ProviderNonWorkTimeUpdatePayload
  providerRemoveService(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ProviderServiceInput
  ): ProviderRemovePayload
  rideDriverRegister(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RideDriverRegisterInput
  ): RideDriverRegisterPayload
  rideDriverUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RideDriverUpdateInput
  ): RideDriverUpdatePayload
  rideRequestCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RideRequestCancelInput
  ): RideRequestCancelPayload
  rideRequestCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RideRequestCreateInput
  ): RideRequestCreatePayload
  rideRequestUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RideRequestUpdateInput
  ): RideRequestUpdatePayload
  rolePermissionsUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RolePermissionsUpdateInput
  ): RolePermissionsUpdatePayload
  roomActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomActivatePayload
  roomClean(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomCleanPayload
  roomCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RoomCreateInput
  ): RoomCreatePayload
  roomDeactivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomDeactivatePayload
  roomNeedsCleaning(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomNeedsCleaningPayload
  roomOccupy(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomOccupyPayload
  roomRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomRemovePayload
  roomUnoccupy(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): RoomUnoccupyPayload
  roomUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: RoomUpdateInput
  ): RoomUpdatePayload
  serviceActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceActivatePayload
  serviceCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceCreateInput
  ): ServiceCreatePayload
  serviceDayScheduleCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceDayScheduleCreateInput
  ): ServiceDayScheduleCreatePayload
  serviceDayScheduleRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceDayScheduleRemovePayload
  serviceDayScheduleUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceDayScheduleUpdateInput
  ): ServiceDayScheduleUpdatePayload
  serviceDeactivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceDeactivatePayload
  serviceProviderAdd(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceProviderInput
  ): ServiceProviderAddPayload
  serviceProviderRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceProviderInput
  ): ServiceProviderRemovePayload
  serviceQueueAdd(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceQueueEntryCreateInput
  ): ServiceQueueEntryCreatePayload
  serviceQueueBook(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryBookPayload
  serviceQueueCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryCancelPayload
  serviceQueueCheckIn(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryCheckInPayload
  serviceQueueFinish(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryFinishPayload
  serviceQueueIgnore(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryIgnorePayload
  serviceQueueLeft(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryLeftPayload
  serviceQueueNoShow(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryNoShowPayload
  serviceQueueReadyForRoom(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryReadyForRoomPayload
  serviceQueueRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryRemovePayload
  serviceQueueSendToRoom(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceQueueEntrySendToRoomInput
  ): ServiceQueueEntrySendToRoomPayload
  serviceQueueStart(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryStartPayload
  serviceQueueUndoState(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceQueueEntryUndoStatePayload
  serviceQueueUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceQueueEntryUpdateInput
  ): ServiceQueueEntryUpdatePayload
  serviceRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): ServiceRemovePayload
  serviceUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: ServiceUpdateInput
  ): ServiceUpdatePayload
  streetAddressUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: AddressesStreetUpdateInput
  ): AddressesStreetUpdatePayload
  symptomCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: SymptomCreateInput
  ): SymptomCreatePayload
  symptomRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): SymptomRemovePayload
  symptomUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: SymptomUpdateInput
  ): SymptomUpdatePayload
  taskActivate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): TaskActivatePayload
  taskCancel(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): TaskCancelPayload
  taskComplete(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): TaskCompletePayload
  taskCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: TaskCreateInput
  ): TaskCreatePayload
  taskIntervalComplete(
    auth: String

    """Organization ID"""
    orgId: ID
    input: TaskIntervalCompleteInput
  ): TaskIntervalCompletePayload
  taskRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): TaskRemovePayload
  taskUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: TaskUpdateInput
  ): TaskUpdatePayload

  """Creates HS for Logged in User; saves data to it; closes it"""
  userAddData(input: UserAddDataInput): UserAddDataPayload
  userCreate(input: UserCreateInput): UserCreatePayload
  userEventCreate(input: UserEventCreateInput): UserEventCreatePayload
  userEventMarkRead(input: UserEventMarkReadInput): UserEventMarkReadPayload
  userFindOrCreate(input: UserFindOrCreateInput): UserFindOrCreatePayload
  userNoteAdd(input: UserNoteAddInput): UserNoteAddPayload
  userNoteUpdate(input: UserNoteUpdateInput): UserNoteUpdatePayload
  userRequestPasswordReset(
    """email address of user"""
    email: String!

    """Org that is sending the reset"""
    org: ID
  ): UserRequestPasswordResetPayload
  userResetPassword(input: UserResetPasswordInput): UserResetPasswordPayload
  userUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: UserUpdateInput
  ): UserUpdatePayload
  workoutActivityCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutActivityCreateInput
  ): WorkoutActivityCreatePayload
  workoutActivityUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutActivityUpdateInput
  ): WorkoutActivityUpdatePayload
  workoutCategoryCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutCategoryCreateInput
  ): WorkoutCategoryCreatePayload
  workoutCategoryUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutCategoryUpdateInput
  ): WorkoutCategoryUpdatePayload
  workoutPlanCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanCreateInput
  ): WorkoutPlanCreatePayload
  workoutPlanGroupActivityCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanGroupActivityCreateInput
  ): WorkoutPlanGroupActivityCreatePayload
  workoutPlanGroupActivityRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): WorkoutPlanGroupActivityRemovePayload
  workoutPlanGroupActivityUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanGroupActivityUpdateInput
  ): WorkoutPlanGroupActivityUpdatePayload
  workoutPlanGroupCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanGroupCreateInput
  ): WorkoutPlanGroupCreatePayload
  workoutPlanGroupRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): WorkoutPlanGroupRemovePayload
  workoutPlanGroupUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanGroupUpdateInput
  ): WorkoutPlanGroupUpdatePayload
  workoutPlanRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): WorkoutPlanRemovePayload
  workoutPlanUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutPlanUpdateInput
  ): WorkoutPlanUpdatePayload
  workoutRoutineCreate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutRoutineCreateInput
  ): WorkoutRoutineCreatePayload
  workoutRoutinePlanAdd(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutRoutinePlanAddInput
  ): WorkoutRoutinePlanAddPayload
  workoutRoutinePlanRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutRoutinePlanRemoveInput
  ): WorkoutRoutinePlanRemovePayload
  workoutRoutineRemove(
    auth: String

    """Organization ID"""
    orgId: ID
    input: IDInput
  ): WorkoutRoutineRemovePayload
  workoutRoutineUpdate(
    auth: String

    """Organization ID"""
    orgId: ID
    input: WorkoutRoutineUpdateInput
  ): WorkoutRoutineUpdatePayload
}

type ApplicationQueries {
  application: Application
  appointmentByMeeting(meetingUrl: String, meetingId: String): Appointment
  insuranceCarrier(id: ID!): InsuranceCarrier
  insuranceCarriers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: String
    search: String
  ): InsuranceCarrierConnection
  insurancePlan(id: ID!): InsurancePlan
  insurancePlans(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: String
    search: String
  ): InsurancePlanConnection
  me: User
  org(id: ID): Organization
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]
    search: String
    ordering: String
  ): OrganizationConnection
  stats(
    """Main Organization ID"""
    org: ID

    """include children (TRUE)"""
    children: Boolean

    """Do not include these children"""
    except: [ID!]
    startEpoch: Int
    endEpoch: Int
  ): Stats
  user(id: ID): User
  userLookup(input: UserLookupInput!): [User!]
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    order: String
    orgs: [ID!]
    roles: [String!]
  ): UserConnection
  viewing(
    """ID of user to view; default[self]"""
    user: ID

    """ID of org to view"""
    org: ID
  ): Viewing
  workoutActivities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: String
    search: String
    category: ID
  ): WorkoutActivityConnection
  workoutActivity(id: ID!): WorkoutActivity
  workoutCategories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: String
    search: String
  ): WorkoutCategoryConnection
  workoutCategory(id: ID!): WorkoutCategory
}

type Appointment implements ActiveRecord & ApptCommon & Period & State & StatusChanges {
  actualDurationMins: Int
  actualEndEpoch: Int
  actualStartEpoch: Int
  allActions: [String!]
  availableActions: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  createdAt: Int
  createdAtIso: String
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  existingPx: Boolean
  expiresAt: Int
  expiresAtIso: ISO8601DateTime
  id: ID
  isLate: Boolean
  kind: String
  lastChangeAt: Int
  lastChangeAtIso: ISO8601DateTime
  lateMins: Int
  meetingId: ID
  meetingUrl: String
  mobileCheckinRequested: Boolean
  params: JSON!
  peopleSeen: Int @deprecated(reason: "Use total_people")
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  person: User
  personId: ID
  priority: Int
  provider: User
  providerId: ID
  readyAt: Int
  readyAtIso: ISO8601DateTime
  reason: String
  room: Room
  roomId: ID
  scheduledAt: Int
  scheduledAtIso: ISO8601DateTime
  secondaryUsers: [User!]
  service: Service
  serviceId: ID
  smsSentAt: Int
  smsSentAtIso: ISO8601DateTime
  source: String
  states: [String!]
  status: String
  statusChanges(activeOnly: Boolean): [StatusChange!]
  totalPeople: Int
  updatedAt: Int
  updatedAtIso: String
}

"""Autogenerated return type of AppointmentBook."""
type AppointmentBookPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentCancel."""
type AppointmentCancelPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentCheckIn."""
type AppointmentCheckInPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentConfirm."""
type AppointmentConfirmPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""The connection type for Appointment."""
type AppointmentConnection {
  """A list of edges."""
  edges: [AppointmentEdge]

  """A list of nodes."""
  nodes: [Appointment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input AppointmentCreateInput {
  org: ID
  service: ID!
  kind: String!
  person: ID!
  startEpoch: Int!
  endEpoch: Int!
  provider: ID
  room: ID
  reason: String
  priority: Int
  existingPx: Boolean
  meetingUrl: String
  meetingId: ID
  source: String
  mobileCheckinRequested: Boolean

  """JSON object of misc data to store on the appointment"""
  params: JSON
}

"""Autogenerated return type of AppointmentCreate."""
type AppointmentCreatePayload {
  appointment: Appointment
  errors: [Error!]
  success: Boolean
}

"""An edge in a connection."""
type AppointmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Appointment
}

"""Autogenerated return type of AppointmentFinish."""
type AppointmentFinishPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentIgnore."""
type AppointmentIgnorePayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentLeft."""
type AppointmentLeftPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentNoShow."""
type AppointmentNoShowPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentReadyForRoom."""
type AppointmentReadyForRoomPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

input AppointmentSendToRoomInput {
  """Appt ID"""
  id: ID!

  """Room ID"""
  room: ID!
}

"""Autogenerated return type of AppointmentSendToRoom."""
type AppointmentSendToRoomPayload {
  appointment: Appointment
  errors: [Error!]
  success: Boolean
}

type AppointmentSlot {
  durationHours: Float
  durationMins: Int
  durationSecs: Int
  endEpoch: Int
  endIso: ISO8601DateTime
  id: ID
  organization: Organization
  organizationId: ID
  provider: Provider
  providerId: ID
  service: Service
  serviceId: ID
  startEpoch: Int
  startIso: ISO8601DateTime
}

"""Autogenerated return type of AppointmentStart."""
type AppointmentStartPayload {
  appointment: Appointment
  errors: [Error!]
  result: Appointment
  success: Boolean
}

"""Autogenerated return type of AppointmentUndoState."""
type AppointmentUndoStatePayload {
  appointment: Appointment
  errors: [Error!]
  success: Boolean
}

input AppointmentUpdateInput {
  id: ID!
  org: ID
  service: ID
  kind: String
  provider: ID
  person: ID
  startEpoch: Int
  endEpoch: Int
  room: ID
  reason: String
  priority: Int
  existingPx: Boolean

  """IDs of secondary users to set; overwrites existing list"""
  secondaryUsers: [ID!]
  meetingUrl: String
  meetingId: ID
  source: String
  mobileCheckinRequested: Boolean
  smsSentAtEpoch: Int

  """JSON object of misc data to store on the appointment"""
  params: JSON
}

"""Autogenerated return type of AppointmentUpdate."""
type AppointmentUpdatePayload {
  appointment: Appointment
  errors: [Error!]
  success: Boolean
}

interface ApptCommon {
  existingPx: Boolean
  expiresAt: Int
  expiresAtIso: ISO8601DateTime
  isLate: Boolean
  kind: String
  lastChangeAt: Int
  lastChangeAtIso: ISO8601DateTime
  lateMins: Int
  meetingId: ID
  meetingUrl: String
  peopleSeen: Int @deprecated(reason: "Use total_people")
  priority: Int
  readyAt: Int
  readyAtIso: ISO8601DateTime
  reason: String
  room: Room
  roomId: ID
  scheduledAt: Int
  scheduledAtIso: ISO8601DateTime
  secondaryUsers: [User!]
  service: Service
  serviceId: ID
  smsSentAt: Int
  smsSentAtIso: ISO8601DateTime
  source: String
  totalPeople: Int
}

type Assessment implements ActiveRecord & State {
  allActions: [String!]
  answersFromUser: [AssessmentAnswer!]
  availableActions: [String!]
  createdAt: Int
  createdAtIso: String

  """Whether the current user is eligible for this assessment or not"""
  eligible: Boolean

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  healthSnapCount: Int
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): HealthSnapConnection
  id: ID
  kind: String

  """
  Date the current user last took this assessment for the current organization
  """
  lastTakenDate: String
  name: String
  organization: Organization
  program: JSON
  requirement: String
  scorers: [Scorer!]
  states: [String!]
  status: String
  uid: String
  updatedAt: Int
  updatedAtIso: String
  version: Int
}

"""Autogenerated return type of AssessmentActivate."""
type AssessmentActivatePayload {
  assessment: Assessment
  errors: [Error!]
  success: Boolean
}

type AssessmentAnswer {
  answer: Answer
  answerType: String
  id: ID
  key: String
  prefill: Boolean
  questionType: String
}

"""Autogenerated return type of AssessmentArchive."""
type AssessmentArchivePayload {
  assessment: Assessment
  errors: [Error!]
  success: Boolean
}

"""The connection type for Assessment."""
type AssessmentConnection {
  """A list of edges."""
  edges: [AssessmentEdge]

  """A list of nodes."""
  nodes: [Assessment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated return type of AssessmentDeactivate."""
type AssessmentDeactivatePayload {
  assessment: Assessment
  errors: [Error!]
  success: Boolean
}

"""An edge in a connection."""
type AssessmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Assessment
}

input AssessmentUpdateInput {
  id: ID!
  name: String
  uid: String
  kind: String
  program: String
  requirement: String
}

"""Autogenerated return type of AssessmentUpdate."""
type AssessmentUpdatePayload {
  assessment: Assessment
  errors: [Error!]
  success: Boolean
}

type Attachment implements ActiveRecord {
  base64: String
  contentUrl: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  label: String
  mimeType: String
  ownerId: ID
  ownerType: String
  updatedAt: Int
  updatedAtIso: String
}

input AttachmentCreateInput {
  user: ID
  label: String
  base64: String!
}

"""Autogenerated return type of AttachmentCreate."""
type AttachmentCreatePayload {
  attachment: Attachment
  errors: [Error!]
  success: Boolean
}

input AttachmentInput {
  label: String!
  base64: String
}

"""Autogenerated return type of AttachmentRemove."""
type AttachmentRemovePayload {
  attachment: Attachment
  errors: [Error!]
  success: Boolean
}

interface Attachments {
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
}

type CarePlan implements ActiveRecord & Attachments & Period & State {
  allActions: [String!]
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  availableActions: [String!]
  availableTaskCategories: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  complianceScore: ComplianceScore
  contributors: [CarePlanContributor!]
  conversation: MessagingConversation
  createdAt: Int
  createdAtIso: String
  description: String
  durationInDays: Int
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  focus: String
  healthSnapCount: Int
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): HealthSnapConnection
  id: ID
  isActive: Boolean
  monitors: [MetricMonitor!]
  name: String
  organization: Organization
  organizationId: ID
  owner: User
  ownerId: ID
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  requirements: [String!]
  states: [String!]
  status: String
  tasks(
    """pending,active,cancelled,completed"""
    status: String
  ): [Task!]
  updatedAt: Int
  updatedAtIso: String
  userId: ID
}

input CarePlanAcceptInput {
  """CarePlan.UUID"""
  id: ID!

  """Day to start the plan on. Default[today]"""
  startDate: String
}

"""Autogenerated return type of CarePlanAccept."""
type CarePlanAcceptPayload {
  carePlan: CarePlan
  errors: [Error!]
  success: Boolean
}

input CarePlanAssignInput {
  """CarePlan.UUID"""
  id: ID!

  """ID of user to assign to"""
  user: ID!

  """Optional Invite Message"""
  inviteMessage: String
}

"""Autogenerated return type of CarePlanAssign."""
type CarePlanAssignPayload {
  carePlan: CarePlan
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of CarePlanCancel."""
type CarePlanCancelPayload {
  carePlan: CarePlan
  errors: [Error!]
  result: CarePlan
  success: Boolean
}

"""Autogenerated return type of CarePlanComplete."""
type CarePlanCompletePayload {
  carePlan: CarePlan
  errors: [Error!]
  result: CarePlan
  success: Boolean
}

type CarePlanContributor implements ActiveRecord {
  carePlan: CarePlan
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  status: String
  statusChangedAt: Int
  statusChangedAtIso: String
  updatedAt: Int
  updatedAtIso: String
  user: User
}

"""Autogenerated return type of CarePlanContributorActivate."""
type CarePlanContributorActivatePayload {
  contributor: CarePlanContributor
  errors: [Error!]
  success: Boolean
}

input CarePlanContributorAddInput {
  """ID of CarePlan to use"""
  carePlan: ID

  """ID of User to add to CarePlan"""
  user: ID
}

"""Autogenerated return type of CarePlanContributorAdd."""
type CarePlanContributorAddPayload {
  contributor: CarePlanContributor
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of CarePlanContributorArchive."""
type CarePlanContributorArchivePayload {
  contributor: CarePlanContributor
  errors: [Error!]
  success: Boolean
}

input CarePlanContributorInput {
  """ID of Contributor"""
  contributor: ID
}

"""Autogenerated return type of CarePlanContributorRemove."""
type CarePlanContributorRemovePayload {
  contributor: CarePlanContributor
  errors: [Error!]
  success: Boolean
}

input CarePlanCreateInput {
  """CarePlan.UUID (client-side UUID, or leave blank for server-side UUID)"""
  id: ID
  name: String
  focus: String
  description: String
  requirements: [String!]

  """Number of Days the CarePlan will last"""
  durationInDays: Int
  attachments: [AttachmentInput!]
}

"""Autogenerated return type of CarePlanCreate."""
type CarePlanCreatePayload {
  carePlan: CarePlan
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of CarePlanRemove."""
type CarePlanRemovePayload {
  carePlan: CarePlan
  errors: [Error!]
  success: Boolean
}

input CarePlanUpdateInput {
  """CarePlan.UUID"""
  id: ID!
  name: String

  """ID/UUID of User that be assigned the CarePlan"""
  user: ID

  """Number of Days the CarePlan will last"""
  durationInDays: Int
  inviteMessage: String
  focus: String
  description: String
  requirements: [String!]
  attachments: [AttachmentInput!]
}

"""Autogenerated return type of CarePlanUpdate."""
type CarePlanUpdatePayload {
  carePlan: CarePlan
  errors: [Error!]
  success: Boolean
}

interface CarePlans {
  carePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
  contributingCarePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
}

type ComplianceScore {
  grade: String
  gradepoint: String
  passfail: String
  percent: String
  raw: String
}

type DataValue implements Period {
  asAnswer: Answer
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  createdAt: Int
  createdAtIso: String
  data: [String!]
  displayData: [String!]
  displayUnits: [String!]
  displayValues: [String!]
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  externalId: String
  id: ID
  key: String
  labels: [String!]
  lockedAt: String
  metric: Metric
  names: [String!]
  notes: [AnswerNote!]
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  source: DataValueSource
  type: String
  units: [String!]
  user: User
  values: [String!]
}

"""The connection type for DataValue."""
type DataValueConnection {
  """A list of edges."""
  edges: [DataValueEdge]

  """A list of nodes."""
  nodes: [DataValue]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DataValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DataValue
}

type DataValueSource {
  id: ID
  identifier: String
  name: String
}

"""The connection type for DataValueSource."""
type DataValueSourceConnection {
  """A list of edges."""
  edges: [DataValueSourceEdge]

  """A list of nodes."""
  nodes: [DataValueSource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DataValueSourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DataValueSource
}

input DataValueSourceInput {
  name: String
  identifier: String
}

type Device implements ActiveRecord {
  createdAt: Int
  createdAtIso: String
  deviceId: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String
  lastSentAt: Int
  lastSentAtIso: ISO8601DateTime
  name: String
  production: Boolean
  sentCount: Int
  status: String
  updatedAt: Int
  updatedAtIso: String
}

input DeviceRegisterInput {
  user: ID!
  deviceId: String!

  """ios or android"""
  kind: String!
  name: String

  """String[1, 0, true, false] default[true]"""
  production: String
}

"""Autogenerated return type of DeviceRegister."""
type DeviceRegisterPayload {
  errors: [Error!]
  result: Device
  success: Boolean
}

input DeviceUnregisterInput {
  deviceId: String!
}

"""Autogenerated return type of DeviceUnregister."""
type DeviceUnregisterPayload {
  errors: [Error!]
  result: Device
  success: Boolean
}

type Error {
  backtrace: [String!]
  code: Int
  message: String
}

type HealthNote implements ActiveRecord {
  createdAt: Int
  createdAtIso: String
  creator: User

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String!
  organization: Organization
  patient: User
  sections: [HealthNoteSection!]
  status: String!
  title: String!
  updatedAt: Int
  updatedAtIso: String
}

input HealthNoteCloseInput {
  id: ID!
}

"""Autogenerated return type of HealthNoteClose."""
type HealthNoteClosePayload {
  errors: [Error!]
  record: HealthNote
  success: Boolean
}

"""The connection type for HealthNote."""
type HealthNoteConnection {
  """A list of edges."""
  edges: [HealthNoteEdge]

  """A list of nodes."""
  nodes: [HealthNote]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input HealthNoteCreateInput {
  patientId: ID!
  title: String!
  kind: String!
}

"""Autogenerated return type of HealthNoteCreate."""
type HealthNoteCreatePayload {
  errors: [Error!]
  record: HealthNote
  success: Boolean
}

"""An edge in a connection."""
type HealthNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HealthNote
}

"""Autogenerated return type of HealthNoteRemove."""
type HealthNoteRemovePayload {
  errors: [Error!]
  record: HealthNote
  success: Boolean
}

type HealthNoteSection implements ActiveRecord {
  content: String
  createdAt: Int
  createdAtIso: String
  creator: User
  data: JSON

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String!
  updatedAt: Int
  updatedAtIso: String
}

input HealthNoteSectionCreateInput {
  healthNoteId: ID!
  kind: String!
  content: String
  data: JSON
}

"""Autogenerated return type of HealthNoteSectionCreate."""
type HealthNoteSectionCreatePayload {
  errors: [Error!]
  record: HealthNoteSection
  success: Boolean
}

"""Autogenerated return type of HealthNoteSectionRemove."""
type HealthNoteSectionRemovePayload {
  errors: [Error!]
  record: HealthNoteSection
  success: Boolean
}

input HealthNoteSectionUpdateInput {
  healthNoteSectionId: ID!
  kind: String
  content: String
  data: JSON
}

"""Autogenerated return type of HealthNoteSectionUpdate."""
type HealthNoteSectionUpdatePayload {
  errors: [Error!]
  record: HealthNoteSection
  success: Boolean
}

input HealthNoteUpdateInput {
  healthNoteId: ID!
  title: String
  kind: String
}

"""Autogenerated return type of HealthNoteUpdate."""
type HealthNoteUpdatePayload {
  errors: [Error!]
  record: HealthNote
  success: Boolean
}

type HealthOrder implements ActiveRecord {
  createdAt: Int
  createdAtIso: String
  creator: User

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String!
  organization: Organization
  patient: User
  sections: [HealthOrderSection!]
  status: String!
  title: String!
  updatedAt: Int
  updatedAtIso: String
}

input HealthOrderCloseInput {
  id: ID!
}

"""Autogenerated return type of HealthOrderClose."""
type HealthOrderClosePayload {
  errors: [Error!]
  record: HealthOrder
  success: Boolean
}

"""The connection type for HealthOrder."""
type HealthOrderConnection {
  """A list of edges."""
  edges: [HealthOrderEdge]

  """A list of nodes."""
  nodes: [HealthOrder]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input HealthOrderCreateInput {
  patientId: ID!
  title: String!
  kind: String!
}

"""Autogenerated return type of HealthOrderCreate."""
type HealthOrderCreatePayload {
  errors: [Error!]
  record: HealthOrder
  success: Boolean
}

"""An edge in a connection."""
type HealthOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HealthOrder
}

"""Autogenerated return type of HealthOrderRemove."""
type HealthOrderRemovePayload {
  errors: [Error!]
  record: HealthOrder
  success: Boolean
}

type HealthOrderSection implements ActiveRecord {
  content: String
  createdAt: Int
  createdAtIso: String
  creator: User
  data: JSON

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String!
  updatedAt: Int
  updatedAtIso: String
}

input HealthOrderSectionCreateInput {
  healthOrderId: ID!
  kind: String!
  content: String
  data: JSON
}

"""Autogenerated return type of HealthOrderSectionCreate."""
type HealthOrderSectionCreatePayload {
  errors: [Error!]
  record: HealthOrderSection
  success: Boolean
}

"""Autogenerated return type of HealthOrderSectionRemove."""
type HealthOrderSectionRemovePayload {
  errors: [Error!]
  record: HealthOrderSection
  success: Boolean
}

input HealthOrderSectionUpdateInput {
  healthOrderSectionId: ID!
  kind: String
  content: String
  data: JSON
}

"""Autogenerated return type of HealthOrderSectionUpdate."""
type HealthOrderSectionUpdatePayload {
  errors: [Error!]
  record: HealthOrderSection
  success: Boolean
}

input HealthOrderUpdateInput {
  healthOrderId: ID!
  title: String
  kind: String
}

"""Autogenerated return type of HealthOrderUpdate."""
type HealthOrderUpdatePayload {
  errors: [Error!]
  record: HealthOrder
  success: Boolean
}

type HealthSnap implements ActiveRecord & Period & State {
  agreement: Agreement
  agreementId: ID
  allActions: [String!]
  assessment: Assessment
  assessmentId: ID
  availableActions: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  closedAt: Int
  closedAtIso: String
  createdAt: Int
  createdAtIso: String
  dataValues: [DataValue!]
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  givenBy: User
  givenById: ID
  healthSnap: HealthSnap
  id: ID
  intervals: [TaskInterval!]

  """arbitrary string at the moment"""
  kind: String
  name: String
  organization: Organization
  organizationId: ID
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  scorers: [Scorer!]
  scores: [Score!]
  states: [String!]
  status: String
  title: String @deprecated(reason: "Use Name")
  updatedAt: Int
  updatedAtIso: String
  user: User
  userId: ID
}

"""Autogenerated return type of HealthSnapCancel."""
type HealthSnapCancelPayload {
  errors: [Error!]
  healthSnap: HealthSnap
  success: Boolean
}

"""Autogenerated return type of HealthSnapClose."""
type HealthSnapClosePayload {
  errors: [Error!]
  healthSnap: HealthSnap
  success: Boolean
}

"""The connection type for HealthSnap."""
type HealthSnapConnection {
  """A list of edges."""
  edges: [HealthSnapEdge]

  """A list of nodes."""
  nodes: [HealthSnap]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type HealthSnapEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HealthSnap
}

input HealthSnapOpenInput {
  """HealthSnap.UUID"""
  id: ID
  name: String
  kind: String

  """ID/UUID of User that will OWN the HS"""
  user: ID

  """Assessment.ID/UID"""
  assessment: ID

  """Agreement.ID/UID"""
  agreement: ID

  """Organization.ID"""
  organization: ID
}

"""Autogenerated return type of HealthSnapOpen."""
type HealthSnapOpenPayload {
  errors: [Error!]
  healthSnap: HealthSnap
  success: Boolean
}

input HealthSnapStoreInput {
  id: ID!
  answers: [AnswerInput!]!
}

"""Autogenerated return type of HealthSnapStore."""
type HealthSnapStorePayload {
  errors: [Error!]
  healthSnap: HealthSnap
  success: Boolean
}

input HealthSnapUpdateInput {
  id: ID!
  name: String
}

"""Autogenerated return type of HealthSnapUpdate."""
type HealthSnapUpdatePayload {
  errors: [Error!]
  healthSnap: HealthSnap
  success: Boolean
}

interface HealthSnaps {
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]

    """open, closed, cancelled"""
    status: [String!]
    kind: String
    kinds: [String!]
    order: String
  ): HealthSnapConnection
}

input IDInput {
  id: ID!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type InsightManual {
  endEpoch: Int
  id: ID
  key: String!
  ops: [String!]
  startEpoch: Int
  unit: String
  values: [Float!]
}

input InsightManualInput {
  key: String!

  """mean, mode, median, sum, count, min, or max"""
  ops: [String!]!
  startEpoch: Int
  endEpoch: Int
}

type InsuranceCard implements ActiveRecord {
  createdAt: Int
  createdAtIso: String
  endOn: ISO8601Date!

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  isPrimary: Boolean
  memberId: ID!
  plan: InsurancePlan!
  startOn: ISO8601Date!
  updatedAt: Int
  updatedAtIso: String
  user: User!
}

"""The connection type for InsuranceCard."""
type InsuranceCardConnection {
  """A list of edges."""
  edges: [InsuranceCardEdge]

  """A list of nodes."""
  nodes: [InsuranceCard]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input InsuranceCardCreateInput {
  userId: ID!
  planId: ID!
  memberId: String!
  startOn: ISO8601Date!
  endOn: ISO8601Date!
  isPrimary: Boolean
}

"""Autogenerated return type of InsuranceCardCreate."""
type InsuranceCardCreatePayload {
  errors: [Error!]
  record: InsuranceCard
  success: Boolean
}

"""An edge in a connection."""
type InsuranceCardEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: InsuranceCard
}

"""Autogenerated return type of InsuranceCardRemove."""
type InsuranceCardRemovePayload {
  errors: [Error!]
  record: InsuranceCard
  success: Boolean
}

input InsuranceCardUpdateInput {
  id: ID!
  userId: ID
  planId: ID
  memberId: String
  startOn: ISO8601Date
  endOn: ISO8601Date
  isPrimary: Boolean
}

"""Autogenerated return type of InsuranceCardUpdate."""
type InsuranceCardUpdatePayload {
  errors: [Error!]
  record: InsuranceCard
  success: Boolean
}

type InsuranceCarrier implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  name: String
  plans(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    order: String
  ): InsurancePlanConnection
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for InsuranceCarrier."""
type InsuranceCarrierConnection {
  """A list of edges."""
  edges: [InsuranceCarrierEdge]

  """A list of nodes."""
  nodes: [InsuranceCarrier]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input InsuranceCarrierCreateInput {
  name: String
}

"""Autogenerated return type of InsuranceCarrierCreate."""
type InsuranceCarrierCreatePayload {
  errors: [Error!]
  record: InsuranceCarrier
  success: Boolean
}

"""An edge in a connection."""
type InsuranceCarrierEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: InsuranceCarrier
}

"""Autogenerated return type of InsuranceCarrierRemove."""
type InsuranceCarrierRemovePayload {
  errors: [Error!]
  record: InsuranceCarrier
  success: Boolean
}

input InsuranceCarrierUpdateInput {
  id: ID!
  name: String
}

"""Autogenerated return type of InsuranceCarrierUpdate."""
type InsuranceCarrierUpdatePayload {
  errors: [Error!]
  record: InsuranceCarrier
  success: Boolean
}

type InsurancePlan implements ActiveRecord {
  activeMemberCount: Int
  carrier: InsuranceCarrier
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  groupNumber: String
  id: ID
  planNumber: String
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for InsurancePlan."""
type InsurancePlanConnection {
  """A list of edges."""
  edges: [InsurancePlanEdge]

  """A list of nodes."""
  nodes: [InsurancePlan]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input InsurancePlanCreateInput {
  carrierId: ID
  carrierName: String
  planNumber: String!
  groupNumber: String!
}

"""Autogenerated return type of InsurancePlanCreate."""
type InsurancePlanCreatePayload {
  errors: [Error!]
  record: InsurancePlan
  success: Boolean
}

"""An edge in a connection."""
type InsurancePlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: InsurancePlan
}

"""Autogenerated return type of InsurancePlanRemove."""
type InsurancePlanRemovePayload {
  errors: [Error!]
  record: InsurancePlan
  success: Boolean
}

input InsurancePlanUpdateInput {
  id: ID!
  planNumber: String
  groupNumber: String
}

"""Autogenerated return type of InsurancePlanUpdate."""
type InsurancePlanUpdatePayload {
  errors: [Error!]
  record: InsurancePlan
  success: Boolean
}

"""Represents untyped JSON"""
scalar JSON

type MessagingConversation implements ActiveRecord {
  carePlan: CarePlan
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  hasUnreadMessages: Boolean
  id: ID
  messageCount: Int
  messages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MessagingMessageConnection
  participant: MessagingParticipant
  participants: [MessagingParticipant!]
  status: String
  topic: String
  unreadMessages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MessagingMessageConnection
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for MessagingConversation."""
type MessagingConversationConnection {
  """A list of edges."""
  edges: [MessagingConversationEdge]

  """A list of nodes."""
  nodes: [MessagingConversation]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input MessagingConversationCreateInput {
  topic: String

  """ID of CarePlan to link"""
  carePlan: ID
}

"""Autogenerated return type of MessagingConversationCreate."""
type MessagingConversationCreatePayload {
  conversation: MessagingConversation
  errors: [Error!]
  success: Boolean
}

"""An edge in a connection."""
type MessagingConversationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MessagingConversation
}

type MessagingMessage implements ActiveRecord {
  attachments: [Attachment!]
  author: User
  body: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  readAt: Int
  readAtIso: String
  subject: String
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for MessagingMessage."""
type MessagingMessageConnection {
  """A list of edges."""
  edges: [MessagingMessageEdge]

  """A list of nodes."""
  nodes: [MessagingMessage]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MessagingMessageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MessagingMessage
}

input MessagingMessageMarkReadInput {
  """IDs of Messages to mark as Read"""
  messages: [ID!]
}

"""Autogenerated return type of MessagingMessageMarkRead."""
type MessagingMessageMarkReadPayload {
  errors: [Error!]
  messages: [MessagingMessage!]
  success: Boolean
}

input MessagingMessagePostInput {
  """ID of Conversation"""
  conversation: ID

  """ID of User creating the message"""
  author: ID
  body: String
}

"""Autogenerated return type of MessagingMessagePost."""
type MessagingMessagePostPayload {
  errors: [Error!]
  message: MessagingMessage
  success: Boolean
}

type MessagingParticipant implements ActiveRecord {
  conversation: MessagingConversation
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  lastMessageReadAt: Int
  messages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Messages since this epoch"""
    sinceEpoch: Int
  ): MessagingMessageConnection
  status: String
  statusChangedAt: Int
  statusChangedAtIso: String
  unreadCount: Int
  updatedAt: Int
  updatedAtIso: String
  user: User
}

"""Autogenerated return type of MessagingParticipantActivate."""
type MessagingParticipantActivatePayload {
  errors: [Error!]
  participant: MessagingParticipant
  success: Boolean
}

input MessagingParticipantAddInput {
  """ID of Conversation to use"""
  conversation: ID

  """ID of User to add to Conversation"""
  user: ID
}

"""Autogenerated return type of MessagingParticipantAdd."""
type MessagingParticipantAddPayload {
  errors: [Error!]
  participant: MessagingParticipant
  success: Boolean
}

"""Autogenerated return type of MessagingParticipantArchive."""
type MessagingParticipantArchivePayload {
  errors: [Error!]
  participant: MessagingParticipant
  success: Boolean
}

input MessagingParticipantInput {
  """ID of Participant"""
  participant: ID
}

"""Autogenerated return type of MessagingParticipantRemove."""
type MessagingParticipantRemovePayload {
  errors: [Error!]
  participant: MessagingParticipant
  success: Boolean
}

type Metric {
  className: String
  cumulative: Boolean
  id: ID
  key: String!
  labels: [String!]
  names: [String!]
  precisions: [Int!]
  storedAs: [String!]
  title: String
  units: [[String!]!]
  valueCount: Int
}

type MetricMonitor implements ActiveRecord {
  alertCount: Int
  createdAt: Int
  createdAtIso: String
  data: [Float!]
  dataHistory(since: String): [DataValue!]
  dataSlopes: [MetricMonitorSlope!]

  """Description of Monitor"""
  desc: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String
  lastAlertAt: Int
  lastAlertAtIso: String
  latestValue: DataValue
  metric: String
  metricInfo: Metric
  secsUntilNextAlert: Int

  """Humanized version of Metric Key"""
  title: String
  unit: String
  updatedAt: Int
  updatedAtIso: String
  userId: ID
}

input MetricMonitorCreateInput {
  """CarePlan.UUID"""
  carePlan: ID!
  metric: String!

  """above,below,over,under,between,outside,info_only,trend_up,trend_down"""
  kind: String!
  data: [Float!]
  unit: String
  secsUntilNextAlert: Int
}

"""Autogenerated return type of MetricMonitorCreate."""
type MetricMonitorCreatePayload {
  errors: [Error!]
  metricMonitor: MetricMonitor
  success: Boolean
}

input MetricMonitorInput {
  """MetricMonitor ID"""
  id: ID!
}

"""Autogenerated return type of MetricMonitorRemove."""
type MetricMonitorRemovePayload {
  errors: [Error!]
  metricMonitor: MetricMonitor
  success: Boolean
}

type MetricMonitorSlope {
  intercept: Float
  label: String
  slope: Float
}

input MetricMonitorUpdateInput {
  """MetricMonitor.id"""
  id: ID
  metric: String
  data: [Float!]
  kind: String
  unit: String
  secsUntilNextAlert: Int
}

"""Autogenerated return type of MetricMonitorUpdate."""
type MetricMonitorUpdatePayload {
  errors: [Error!]
  metricMonitor: MetricMonitor
  success: Boolean
}

type Module implements ActiveRecord {
  abilities: JSON
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  name: String
  requires: [String!]
  slug: String
  updatedAt: Int
  updatedAtIso: String
}

input NCMetricFakerInput {
  """ID/UUID of User that will OWN this data"""
  user: ID!
  org: ID!

  """Metric ID"""
  metric: ID!
  units: String
  minValue: Float!
  maxValue: Float!
  maxDurationSecs: Int = 3600
  minDurationSecs: Int = 60
  healthSnapsPerDay: Int = 1
  days: Int = 1
  startDate: String
  kind: String = "fake"
}

"""Autogenerated return type of NCMetricFaker."""
type NCMetricFakerPayload {
  errors: [Error!]
  success: Boolean
}

type NameCount {
  count: Int
  id: ID
  name: String
  value: Float
}

type OrgModule implements ActiveRecord {
  abilities: JSON
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  module: Module
  name: String
  requires: [String!]
  slug: String
  status: String
  statusChangedAt: Int
  statusChangedAtIso: String
  updatedAt: Int
  updatedAtIso: String
}

input OrgModuleInput {
  slug: String!
}

type Organization implements ActiveRecord & Addresses & Attachments & CarePlans & HealthSnaps & Period & Rides & State {
  addresses: [AddressesStreet!]
  agreement(agreementId: ID!): Agreement
  agreements(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]
    search: String
    ordering: String
    status: [String!]
  ): AgreementConnection
  agreementsForUser: [Agreement!]
  allActions: [String!]
  ancestorIds: [ID!]
  ancestors: [Organization!]
  appointment(id: ID): Appointment
  appointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    provider: ID
    person: ID
    service: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
    date: String
  ): AppointmentConnection
  assessment(assessmentId: ID!): Assessment
  assessments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]
    search: String
    ordering: String
    status: [String!]
  ): AssessmentConnection
  assessmentsForUser: [Assessment!]
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  availableActions: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  carePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
  childIds: [ID!]
  children: [Organization!]
  closedDates: [ISO8601Date!]
  contributingCarePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
  createdAt: Int
  createdAtIso: String
  daySchedules(service: ID, provider: ID, ordering: String, weekNum: Int, day: String): [ServiceDaySchedule!]
  defaultRole: String
  defaultServiceDurationMins: Int
  desc: String
  descendantIds: [ID!]
  descendants: [Organization!]
  emails: [AddressesEmail!]
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  externalId: String
  flags: [String!]
  healthNoteCount: Int
  healthNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    order: String
    kind: String

    """open || closed; default[open,closed]"""
    status: [String!]

    """Return only notes created by this userID"""
    createdBy: ID
  ): HealthNoteConnection
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]

    """open, closed, cancelled"""
    status: [String!]
    kind: String
    kinds: [String!]
    order: String
  ): HealthSnapConnection
  hipaaFormat: String
  id: ID
  infoGenderIdentity: [String!]
  infoRace: [String!]
  infoSexualOrientation: [String!]
  isRoot: Boolean
  kind: String
  modules: [OrgModule!]
  name: String
  parent: Organization
  parentId: ID
  pendingAppointmentExpirationMinutes: Int
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  phones: [AddressesPhone!]

  """Org Preferences"""
  preferences(
    """Prefix to filter preferences by"""
    prefix: String
  ): [Preference!]
  provider(id: ID): Provider
  providerCount(search: String): Int
  providers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ordering: String
    search: String
  ): ProviderConnection
  ride(id: ID): RideRequest
  rides(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    statuses: [String!]

    """default[-scheduled_at]"""
    order: String
  ): RideRequestConnection
  roleCounts: [NameCount!]
  roles: [Role!]
  room(id: ID): Room
  rooms(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    kind: [String!]
    status: [String!]
    ordering: String
  ): RoomConnection
  root: Organization
  rootId: ID
  rosters: [String!]
  service(id: ID): Service
  services(kind: [String!], status: [String!], ordering: String): [Service!]
  siblingIds: [ID!]
  siblings: [Organization!]
  states: [String!]
  status: String
  symptoms(priority: String, search: String, ordering: String): [Symptom!]
  timeZone: String
  updatedAt: Int
  updatedAtIso: String
  urls: [AddressesURL!]
  user: User
  userCount(role: String, search: String): Int
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    role: String
    ordering: String
    search: String
  ): UserConnection
}

"""The connection type for Organization."""
type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge]

  """A list of nodes."""
  nodes: [Organization]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input OrganizationCreateInput {
  name: String!

  """ID of parent organization"""
  parentId: ID

  """[facility, event, main]"""
  kind: String

  """[active, inactive]"""
  status: String

  """Description"""
  desc: String
  defaultServiceDurationMins: Int
  beginEpoch: Int
  endEpoch: Int
  phones: [AddressesPhoneInput!]
  emails: [AddressesEmailInput!]
  addresses: [AddressesStreetInput!]
  urls: [AddressesURLInput!]
  attachments: [AttachmentInput!]
  flags: [String!]
  timeZone: String

  """Use ISODates"""
  closedDates: [String!]

  """Default: 'f L1'"""
  hipaaFormat: String
  pendingAppointmentExpirationMinutes: Int
}

"""Autogenerated return type of OrganizationCreate."""
type OrganizationCreatePayload {
  errors: [Error!]
  organization: Organization
  success: Boolean
}

"""An edge in a connection."""
type OrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Organization
}

"""Autogenerated return type of OrganizationRemove."""
type OrganizationRemovePayload {
  errors: [Error!]
  organization: Organization
  success: Boolean
}

input OrganizationUpdateInput {
  id: ID!
  name: String

  """ID of parent organization"""
  parentId: ID

  """facility,event,main"""
  kind: String

  """Description"""
  desc: String
  defaultServiceDurationMins: Int
  preferences: [PreferenceInput!]
  beginEpoch: Int
  endEpoch: Int
  phones: [AddressesPhoneInput!]
  emails: [AddressesEmailInput!]
  addresses: [AddressesStreetInput!]
  urls: [AddressesURLInput!]
  attachments: [AttachmentInput!]
  modules: [OrgModuleInput!]
  defaultRole: String
  flags: [String!]
  timeZone: String

  """Use ISODates -- overwrites existing dates"""
  closedDates: [String!]
  hipaaFormat: String
  pendingAppointmentExpirationMinutes: Int
}

"""Autogenerated return type of OrganizationUpdate."""
type OrganizationUpdatePayload {
  errors: [Error!]
  organization: Organization
  success: Boolean
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface Period {
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
}

type Preference implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  key: String
  updatedAt: Int
  updatedAtIso: String
  value: [String!]
}

input PreferenceInput {
  key: String!
  value: [String!]!
}

interface Preferences {
  """Preferences"""
  preferences(
    """Prefix to filter preferences by"""
    prefix: String
  ): [Preference!]
}

type Provider implements ActiveRecord & Attachments & Preferences {
  abbrName: String
  appointment(id: ID): Appointment
  appointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    organization: ID
    person: ID
    service: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
  ): AppointmentConnection
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  createdAt: Int
  createdAtIso: String
  daySchedules(service: ID, ordering: String, weekNum: Int, day: String): [ServiceDaySchedule!]

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  firstName: String
  fullName: String
  id: ID
  initials: String
  lastName: String
  middleName: String
  nonWorkTimes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startEpoch: Int
    endEpoch: Int
    ordering: String
  ): ProviderNonWorkTimeConnection
  organization(id: ID): Organization
  organizations: [Organization!]

  """User Preferences"""
  preferences(
    """Prefix to filter preferences by"""
    prefix: String
  ): [Preference!]
  service(id: ID): Service
  services: [Service!]
  suffix: String
  updatedAt: Int
  updatedAtIso: String
  uuid: String
}

"""Autogenerated return type of ProviderAdd."""
type ProviderAddPayload {
  errors: [Error!]
  provider: User
  success: Boolean
}

"""The connection type for Provider."""
type ProviderConnection {
  """A list of edges."""
  edges: [ProviderEdge]

  """A list of nodes."""
  nodes: [Provider]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProviderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Provider
}

type ProviderNonWorkTime implements ActiveRecord & Period {
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  createdAt: Int
  createdAtIso: String
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  provider: User
  providerId: ID
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for ProviderNonWorkTime."""
type ProviderNonWorkTimeConnection {
  """A list of edges."""
  edges: [ProviderNonWorkTimeEdge]

  """A list of nodes."""
  nodes: [ProviderNonWorkTime]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ProviderNonWorkTimeCreateInput {
  provider: ID!
  startEpoch: Int!
  endEpoch: Int!
}

"""Autogenerated return type of ProviderNonWorkTimeCreate."""
type ProviderNonWorkTimeCreatePayload {
  errors: [Error!]
  nonWorkTime: ProviderNonWorkTime
  success: Boolean
}

"""An edge in a connection."""
type ProviderNonWorkTimeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProviderNonWorkTime
}

"""Autogenerated return type of ProviderNonWorkTimeRemove."""
type ProviderNonWorkTimeRemovePayload {
  errors: [Error!]
  nonWorkTime: ProviderNonWorkTime
  success: Boolean
}

input ProviderNonWorkTimeUpdateInput {
  id: ID!
  provider: ID
  startEpoch: Int
  endEpoch: Int
}

"""Autogenerated return type of ProviderNonWorkTimeUpdate."""
type ProviderNonWorkTimeUpdatePayload {
  errors: [Error!]
  nonWorkTime: ProviderNonWorkTime
  success: Boolean
}

"""Autogenerated return type of ProviderRemove."""
type ProviderRemovePayload {
  errors: [Error!]
  provider: User
  success: Boolean
}

input ProviderServiceInput {
  provider: ID!
  service: ID!
}

type RideDriver implements ActiveRecord {
  completedCount: Int
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  name: String
  rating: ID
  service: ID
  serviceIdentifier: ID
  updatedAt: Int
  updatedAtIso: String
}

input RideDriverRegisterInput {
  """
  Our Service Identifier; e.g. "uber"
  """
  service: ID!

  """Service's unique identifier for the driver"""
  serviceIdentifier: ID!
  name: String!

  """Rating at service"""
  rating: String
}

"""Autogenerated return type of RideDriverRegister."""
type RideDriverRegisterPayload {
  errors: [Error!]
  result: RideDriver
  success: Boolean
}

input RideDriverUpdateInput {
  """Our Driver ID"""
  id: ID!

  """
  Our Service Identifier; e.g. "uber"
  """
  service: ID

  """Service's unique identifier for the driver"""
  serviceIdentifier: ID
  name: String

  """Rating at service"""
  rating: String
}

"""Autogenerated return type of RideDriverUpdate."""
type RideDriverUpdatePayload {
  errors: [Error!]
  result: RideDriver
  success: Boolean
}

type RideRequest implements ActiveRecord & State & StatusChanges {
  allActions: [String!]
  availableActions: [String!]
  billingAccount: String
  createdAt: Int
  createdAtIso: String
  driver: RideDriver

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  fromAddr: String
  id: ID
  name: String
  notes: String
  org: Organization
  patient: User
  scheduledAt: Int
  scheduledAtIso: ISO8601DateTime
  scheduler: User
  service: String
  serviceInfo: JSON
  states: [String!]
  status: String
  statusChanges(activeOnly: Boolean): [StatusChange!]
  toAddr: String
  updatedAt: Int
  updatedAtIso: String
}

input RideRequestCancelInput {
  """ID of the RideRequest"""
  id: ID!
}

"""Autogenerated return type of RideRequestCancel."""
type RideRequestCancelPayload {
  errors: [Error!]
  result: RideRequest
  success: Boolean
}

"""The connection type for RideRequest."""
type RideRequestConnection {
  """A list of edges."""
  edges: [RideRequestEdge]

  """A list of nodes."""
  nodes: [RideRequest]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input RideRequestCreateInput {
  """The Organization"""
  org: ID!

  """The Patient the ride is for"""
  patientId: ID!

  """The address to start the ride"""
  fromAddr: String!

  """The address to end the ride"""
  toAddr: String!

  """Organization's Billing Code for Ride Service"""
  billingAccount: ID

  """Time to be picked up; default[ASAP]"""
  scheduledAt: ISO8601DateTime

  """Name of rider if other than patient name"""
  name: String
  notes: String
  serviceInfo: JSON
}

"""Autogenerated return type of RideRequestCreate."""
type RideRequestCreatePayload {
  errors: [Error!]
  result: RideRequest
  success: Boolean
}

"""An edge in a connection."""
type RideRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RideRequest
}

input RideRequestUpdateInput {
  """ID of the RideRequest"""
  id: ID!

  """The Organization"""
  org: ID

  """The Patient the ride is for"""
  patientId: ID

  """The address to start the ride"""
  fromAddr: String

  """The address to end the ride"""
  toAddr: String

  """Organization's Billing Code for Ride Service"""
  billingAccount: ID

  """Time to be picked up; default[ASAP]"""
  scheduledAt: ISO8601DateTime

  """Name of rider if other than patient name"""
  name: String
  notes: String
  serviceInfo: JSON
  status: String

  """our ID of new Driver; get it from rideRegisterDriver mutation"""
  driverId: ID
}

"""Autogenerated return type of RideRequestUpdate."""
type RideRequestUpdatePayload {
  errors: [Error!]
  result: RideRequest
  success: Boolean
}

interface Rides {
  ride(id: ID): RideRequest
  rides(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    statuses: [String!]

    """default[-scheduled_at]"""
    order: String
  ): RideRequestConnection
}

type Role implements ActiveRecord {
  count: Int
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  name: String!
  org: Organization
  orgId: ID
  orgName: String
  permissions: JSON
  role: String!
  updatedAt: Int
  updatedAtIso: String
}

input RoleInput {
  role: String!
  orgId: ID
}

input RolePermissionsUpdateInput {
  id: ID!
  name: String
  permissions: JSON
}

"""Autogenerated return type of RolePermissionsUpdate."""
type RolePermissionsUpdatePayload {
  errors: [Error!]
  role: Role
  success: Boolean
}

type Room implements ActiveRecord {
  appointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    organization: ID
    person: ID
    provider: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
  ): AppointmentConnection
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  kind: String
  status: String
  title: String
  updatedAt: Int
  updatedAtIso: String
}

"""Autogenerated return type of RoomActivate."""
type RoomActivatePayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""Autogenerated return type of RoomClean."""
type RoomCleanPayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""The connection type for Room."""
type RoomConnection {
  """A list of edges."""
  edges: [RoomEdge]

  """A list of nodes."""
  nodes: [Room]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input RoomCreateInput {
  """Organization.ID"""
  org: ID!
  title: String
  kind: String
}

"""Autogenerated return type of RoomCreate."""
type RoomCreatePayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""Autogenerated return type of RoomDeactivate."""
type RoomDeactivatePayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""An edge in a connection."""
type RoomEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Room
}

"""Autogenerated return type of RoomNeedsCleaning."""
type RoomNeedsCleaningPayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""Autogenerated return type of RoomOccupy."""
type RoomOccupyPayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""Autogenerated return type of RoomRemove."""
type RoomRemovePayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

"""Autogenerated return type of RoomUnoccupy."""
type RoomUnoccupyPayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

input RoomUpdateInput {
  id: ID!
  title: String
  kind: String
}

"""Autogenerated return type of RoomUpdate."""
type RoomUpdatePayload {
  errors: [Error!]
  room: Room
  success: Boolean
}

type Score implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  healthSnap: HealthSnap
  healthSnapId: ID
  id: ID
  name: String
  result: JSON
  scoredAt: String
  scorer: Scorer
  updatedAt: Int
  updatedAtIso: String
  user: User
}

type Scorer implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  name: String
  scoreTitle: String
  serviceClass: String
  updatedAt: Int
  updatedAtIso: String
}

type Service implements ActiveRecord & Attachments {
  addresses: [AddressesStreet!]!
  agreementCount: Int!
  agreements: [Agreement!]!
  allowOnlineAppts: Boolean
  appointment(id: ID): Appointment
  appointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    person: ID
    provider: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
    date: String
  ): AppointmentConnection
  assessmentCount: Int!
  assessments: [Assessment!]!
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  autoCloseMins: Int
  availableTimes(
    """[Optional] Date to get times for  (default: today)"""
    date: String

    """[Optional] For Provider services... filters by provider"""
    providerId: ID
  ): [Int!]
  availableTimesIso(
    """[Optional] Date to get times for  (default: today)"""
    date: String

    """[Optional] For Provider services... filters by provider"""
    providerId: ID
  ): [String!]
  avgActualDurationMins: Int
  bookAheadDays: Int
  bookedSmsMsg: String
  cancellationSmsMsg: String
  channelId: String
  createdAt: Int
  createdAtIso: String
  currentAtLocationCount: Int
  currentDaySchedules: [ServiceDaySchedule!]
  currentTime: String
  currentWaitCount: Int
  currentWaitMins(
    """ID of QueueEntry"""
    place: ID
  ): Int
  daySchedules(provider: ID, ordering: String, weekNum: Int, day: String): [ServiceDaySchedule!]
  desc: String
  durationMins: Int

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  gridForDays(
    startDate: String

    """default(1 week after start)"""
    endDate: String
  ): [ServiceQueueGrid]
  groupPrimary: Boolean
  id: ID
  isOpen: Boolean
  kind: String
  minBookMins: Int
  minsUntilLate: Int

  """returns next available time slot for all providers of this service"""
  nextAvailableAppt(
    provider: ID
    person: ID
    durationMins: Int

    """when to start looking (ISO or epoch as string)"""
    after: String

    """
    how far into the future to look; defaults to 6 mos; (ISO or epoch as string)
    """
    hardStop: String
  ): [AppointmentSlot!]
  organization: Organization
  organizationId: ID
  params: JSON
  productXid: String
  providerCount: Int
  providers: [Provider!]
  queue(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    status: [String!]
    ordering: String
    priorities: String
    date: String
    startEpoch: Int
    endEpoch: Int
  ): ServiceQueueEntryConnection
  queueCountBy(person: ID, provider: ID, room: ID, status: [String!], kind: [String!], priority: String = "all", startEpoch: Int, endEpoch: Int, groupBy: String = "status", date: String): [NameCount!]
  queueEntry(id: ID): ServiceQueueEntry
  queueGrid(
    """Date to show Grid for (default Today)"""
    date: String

    """epoch || full-time iso of when to start grid"""
    startTime: String

    """epoch || full-time iso of when to end grid"""
    endTime: String
  ): ServiceQueueGrid
  roomCount: Int
  rooms: [Room!]
  status: String
  supportsVirtual: Boolean
  title: String
  updatedAt: Int
  updatedAtIso: String
}

"""Autogenerated return type of ServiceActivate."""
type ServiceActivatePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

input ServiceCreateInput {
  org: ID!
  title: String!

  """(provider_appt,appointment,queue)"""
  kind: String
  durationMins: Int

  """mins until a person is late (0 to disable)"""
  minsUntilLate: Int

  """SMS Message for cancellation of booked appts"""
  cancellationSmsMsg: String

  """SMS Message for booking confirmation"""
  bookedSmsMsg: String
  allowOnlineAppts: Boolean
  bookAheadDays: Int

  """Mins before an appt that a user is allowed to book that appt"""
  minBookMins: Int

  """mins after closing time of last schedule to auto-close open appts"""
  autoCloseMins: Int
  supportsVirtual: Boolean

  """Assessments to link to this service"""
  assessmentIds: [ID!]

  """Agreements to link to this service"""
  agreementIds: [ID!]
  desc: String
  productXid: String
  attachments: [AttachmentInput!]

  """
  Kind of Room to Auto-Create; options[waiting, treatment, other, or none]; default[none]
  """
  initialRoomKind: String
  addresses: [AddressesStreetInput!]

  """Is this service the primary service for a group of services?"""
  groupPrimary: Boolean

  """JSON object of misc data to store on the service"""
  params: JSON
}

"""Autogenerated return type of ServiceCreate."""
type ServiceCreatePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

type ServiceDaySchedule implements ActiveRecord {
  concurrency: Int
  createdAt: Int
  createdAtIso: String
  day: Int
  dayName: String
  dayStr: String @deprecated(reason: "use dayName")
  endTime: Int

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  hours: [Int!]
  id: ID
  onlineEndTime: Int
  onlineHours: [Int!]
  onlineStartTime: Int
  provider: User
  providerId: ID
  service: Service
  serviceId: ID
  startTime: Int
  updatedAt: Int
  updatedAtIso: String
}

input ServiceDayScheduleCreateInput {
  service: ID!
  startTime: Int!
  endTime: Int!
  onlineStartTime: Int
  onlineEndTime: Int
  provider: ID
  dayNum: Int
  dayStr: String
  weekNum: Int
  concurrency: Int
}

"""Autogenerated return type of ServiceDayScheduleCreate."""
type ServiceDayScheduleCreatePayload {
  daySchedule: ServiceDaySchedule
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of ServiceDayScheduleRemove."""
type ServiceDayScheduleRemovePayload {
  daySchedule: ServiceDaySchedule
  errors: [Error!]
  success: Boolean
}

input ServiceDayScheduleUpdateInput {
  id: ID!
  provider: ID
  service: ID
  dayNum: Int
  dayStr: String
  startTime: Int
  endTime: Int
  onlineStartTime: Int
  onlineEndTime: Int
  weekNum: Int
  concurrency: Int
}

"""Autogenerated return type of ServiceDayScheduleUpdate."""
type ServiceDayScheduleUpdatePayload {
  daySchedule: ServiceDaySchedule
  errors: [Error!]
  success: Boolean
}

"""Autogenerated return type of ServiceDeactivate."""
type ServiceDeactivatePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

"""Autogenerated return type of ServiceProviderAdd."""
type ServiceProviderAddPayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

input ServiceProviderInput {
  service: ID!
  provider: ID!
}

"""Autogenerated return type of ServiceProviderRemove."""
type ServiceProviderRemovePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

type ServiceQueueEntry implements ActiveRecord & ApptCommon & Period & State & StatusChanges {
  allActions: [String!]
  availableActions: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  createdAt: Int
  createdAtIso: String

  """How long this spot will approximately wait..."""
  currentWaitMins: Int
  elapsedMins: Int
  elapsedSecs: Int
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  existingPx: Boolean
  expiresAt: Int
  expiresAtIso: ISO8601DateTime
  id: ID
  isLate: Boolean
  kind: String
  lastChangeAt: Int
  lastChangeAtIso: ISO8601DateTime
  lateMins: Int
  meetingId: ID
  meetingUrl: String
  minsUntilLate: Int
  mobileCheckinRequested: Boolean
  peopleSeen: Int @deprecated(reason: "Use total_people")
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  person: User
  personId: ID
  priority: Int
  readyAt: Int
  readyAtIso: ISO8601DateTime
  reason: String
  room: Room
  roomId: ID
  scheduledAt: Int
  scheduledAtIso: ISO8601DateTime
  secondaryUsers: [User!]
  service: Service
  serviceId: ID
  smsSentAt: Int
  smsSentAtIso: ISO8601DateTime
  source: String
  states: [String!]
  status: String
  statusChanges(activeOnly: Boolean): [StatusChange!]
  totalPeople: Int
  updatedAt: Int
  updatedAtIso: String
  waitSecs: Int @deprecated(reason: "elapsed_secs")
}

"""Autogenerated return type of ServiceQueueEntryBook."""
type ServiceQueueEntryBookPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryCancel."""
type ServiceQueueEntryCancelPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryCheckIn."""
type ServiceQueueEntryCheckInPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""The connection type for ServiceQueueEntry."""
type ServiceQueueEntryConnection {
  """A list of edges."""
  edges: [ServiceQueueEntryEdge]

  """A list of nodes."""
  nodes: [ServiceQueueEntry]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ServiceQueueEntryCreateInput {
  service: ID!
  person: ID!
  priority: Int
  reason: String

  """Epoch of time online person is scheduling"""
  scheduledAt: Int

  """[walk-in online] default(walk-in)"""
  kind: String

  """[web mobile kiosk staff] default(web)"""
  source: String
  existingPx: Boolean

  """mins until a person is late (0 to disable)"""
  minsUntilLate: Int
  meetingUrl: String
  meetingId: ID
  mobileCheckinRequested: Boolean
}

"""Autogenerated return type of ServiceQueueEntryCreate."""
type ServiceQueueEntryCreatePayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""An edge in a connection."""
type ServiceQueueEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ServiceQueueEntry
}

"""Autogenerated return type of ServiceQueueEntryFinish."""
type ServiceQueueEntryFinishPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryIgnore."""
type ServiceQueueEntryIgnorePayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryLeft."""
type ServiceQueueEntryLeftPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryNoShow."""
type ServiceQueueEntryNoShowPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryReadyForRoom."""
type ServiceQueueEntryReadyForRoomPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryRemove."""
type ServiceQueueEntryRemovePayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

input ServiceQueueEntrySendToRoomInput {
  """QueueEntry/Appt ID"""
  id: ID!

  """Room ID"""
  room: ID!
}

"""Autogenerated return type of ServiceQueueEntrySendToRoom."""
type ServiceQueueEntrySendToRoomPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryStart."""
type ServiceQueueEntryStartPayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

"""Autogenerated return type of ServiceQueueEntryUndoState."""
type ServiceQueueEntryUndoStatePayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

input ServiceQueueEntryUpdateInput {
  id: ID!
  service: ID
  person: ID
  priority: Int
  reason: String

  """Epoch of estimated time to be ready"""
  readyAt: Int

  """RoomID"""
  room: ID

  """[walk-in online]"""
  kind: String

  """[web mobile kiosk staff]"""
  source: String
  existingPx: Boolean

  """mins until a person is late (0 to disable)"""
  minsUntilLate: Int
  meetingUrl: String
  meetingId: ID

  """IDs of secondary users to set; overwrites existing list"""
  secondaryUsers: [ID!]
  mobileCheckinRequested: Boolean
  smsSentAtEpoch: Int
}

"""Autogenerated return type of ServiceQueueEntryUpdate."""
type ServiceQueueEntryUpdatePayload {
  errors: [Error!]
  queueEntry: ServiceQueueEntry
  success: Boolean
}

type ServiceQueueGrid {
  concurrency: Int
  durationMins: Int
  endTime: Int
  endTimeIso: String
  grid: [ServiceQueueEntry]
  schedule: ServiceDaySchedule
  startTime: Int
  startTimeIso: String
}

"""Autogenerated return type of ServiceRemove."""
type ServiceRemovePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

input ServiceUpdateInput {
  id: ID!
  title: String

  """(provider_appt,appointment,queue)"""
  kind: String

  """use (-1) to set to org default"""
  durationMins: Int

  """mins until a person is late (0 to disable)"""
  minsUntilLate: Int

  """SMS Message for cancellation of booked appts"""
  cancellationSmsMsg: String

  """SMS Message for booking confirmation"""
  bookedSmsMsg: String
  allowOnlineAppts: Boolean
  bookAheadDays: Int

  """rooms to use for this service"""
  roomIds: [ID!]

  """mins before an appt that a user is allowed to book that appt"""
  minBookMins: Int

  """mins after closing time of last schedule to auto-close open appts"""
  autoCloseMins: Int
  supportsVirtual: Boolean

  """assessments to link to this Service"""
  assessmentIds: [ID!]

  """agreements to link to this Service"""
  agreementIds: [ID!]
  desc: String
  productXid: String
  attachments: [AttachmentInput!]
  addresses: [AddressesStreetInput!]

  """Is this service the primary service for a group of services?"""
  groupPrimary: Boolean

  """JSON object of misc data to store on the service"""
  params: JSON
}

"""Autogenerated return type of ServiceUpdate."""
type ServiceUpdatePayload {
  errors: [Error!]
  service: Service
  success: Boolean
}

interface State {
  allActions: [String!]
  availableActions: [String!]
  states: [String!]
  status: String
}

type Stats {
  endTime: Int
  endTimeIso: String
  id: ID
  orgs: [StatsOrg!]
  service(id: ID): StatsService
  services: [StatsService!]
  startTime: Int
  startTimeIso: String
}

type StatsOrg {
  id: ID
  kind: String
  name: String
  periodUserCounts: [NameCount!]
  service(id: ID): StatsService
  services(ids: [ID!]): [StatsService!]
  status: String
  timeZone: String
  totalUserCounts: [NameCount!]
}

type StatsService {
  appointmentCount(
    """Only Completed; Default[false]"""
    completed: Boolean
  ): Int
  appointments(
    """Only Completed; Default[false]"""
    completed: Boolean
  ): StatsServiceAppointmentInfo

  """NOTE: only does 1 day -- the day at the start_epoch"""
  apptsInPeriod(
    """Only Completed; Default[true]"""
    completed: Boolean
  ): Int
  avgActualDurationMins: Int

  """([active,roomed] to completed) mins [completed only]"""
  avgSessionMins(
    """Only Completed; Default[true]"""
    completed: Boolean
  ): Int

  """(check_in to [active,roomed]) mins [completed only]"""
  avgWaitMins(
    """Only Completed; Default[true]"""
    completed: Boolean
  ): Int
  durationMins: Int
  id: ID
  kind: String

  """NOTE: only does 1 day -- the day at the start_epoch"""
  maxAppts: Int
  name: String
  organization: Organization
  organizationId: ID
  schedules: [StatsServiceDaySchedule!]
  title: String

  """NOTE: only does 1 day -- the day at the start_epoch"""
  utilizationPct(
    """Only Completed; Default[true]"""
    completed: Boolean
  ): Float
}

type StatsServiceAppointmentInfo {
  ageBreakdown(filter: String): [NameCount!]

  """([active,roomed] to completed) mins [completed only]"""
  avgSessionMins: Int

  """(check_in to [active,roomed]) mins [completed only]"""
  avgWaitMins: Int
  avgWaitSecs(filter: String): [NameCount!]
  count(filter: String): Int
  existingPxBreakdown(filter: String): [NameCount!]
  kindBreakdown(filter: String): [NameCount!]
  priorityBreakdown(filter: String): [NameCount!]
  reasonBreakdown(filter: String): [NameCount!]
  sourceBreakdown(filter: String): [NameCount!]
  statusBreakdown(filter: String): [NameCount!]
}

type StatsServiceDaySchedule {
  apptsInPeriod: Int @deprecated(reason: "moved to Service")
  day: Int
  dayName: String
  hours: [Int!]
  id: ID
  maxAppts: Int @deprecated(reason: "moved to Service")
  utilizationPct: Float @deprecated(reason: "moved to Service")
}

type StatusChange implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  fromState: String
  id: ID
  toState: String
  undone: Boolean
  undoneByUser: User
  updatedAt: Int
  updatedAtIso: String
  user: User
  userId: ID
}

interface StatusChanges {
  statusChanges(activeOnly: Boolean): [StatusChange!]
}

type Symptom implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  message: String
  priority: String
  title: String
  updatedAt: Int
  updatedAtIso: String
}

input SymptomCreateInput {
  org: ID!
  title: String!
  priority: String
  message: String
}

"""Autogenerated return type of SymptomCreate."""
type SymptomCreatePayload {
  errors: [Error!]
  success: Boolean
  symptom: Symptom
}

"""Autogenerated return type of SymptomRemove."""
type SymptomRemovePayload {
  errors: [Error!]
  success: Boolean
  symptom: Symptom
}

input SymptomUpdateInput {
  id: ID!
  title: String
  priority: String
  message: String
}

"""Autogenerated return type of SymptomUpdate."""
type SymptomUpdatePayload {
  errors: [Error!]
  success: Boolean
  symptom: Symptom
}

type Task implements ActiveRecord & Period & State {
  allActions: [String!]
  availableActions: [String!]
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  carePlan: CarePlan
  compliance: Float
  complianceScore: ComplianceScore
  createdAt: Int
  createdAtIso: String
  data: [Float!]
  dayIntervals(
    """Day to show intervals; default[TODAY]"""
    date: String
  ): [TaskInterval!]

  """1-28"""
  daysOfMonth: [Int!]

  """sun,mon,tue,wed,thu,fri,sat"""
  daysOfWeek: [String!]

  """Description"""
  desc: String
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID

  """day, week, month"""
  interval: String
  intervals(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """[ISO DATE] Show Intervals since and includeing this Date"""
    sinceDate: String

    """[ISO DATE] Show Intervals up to and including this Date"""
    untilDate: String
  ): TaskIntervalConnection

  """the Vital that the task operates on (activity.steps, vital.heart_rate)"""
  key: String
  maxValue: Float

  """before, after, anytime"""
  mealInfo: String
  metric: Metric
  minValue: Float
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  states: [String!]
  status: String
  testType: String

  """[morning, afternoon, evening] || anytime"""
  timeFrames: [String!]
  title: String

  """Units the data values are in"""
  unit: String
  updatedAt: Int
  updatedAtIso: String
  user: User
  values: [Float!] @deprecated(reason: "use data")
}

"""Autogenerated return type of TaskActivate."""
type TaskActivatePayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

"""Autogenerated return type of TaskCancel."""
type TaskCancelPayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

"""Autogenerated return type of TaskComplete."""
type TaskCompletePayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

input TaskCreateInput {
  """CarePlan.UUID"""
  carePlan: ID!
  key: String!
  title: String
  desc: String

  """at_least, at_most, maintain"""
  testType: String

  """min_value, max_value - max is optional"""
  data: [Float!]

  """unit for values"""
  unit: String

  """day, week, month"""
  interval: String

  """[morning, afternoon, evening] || [anytime]"""
  timeFrames: [String!]

  """before, after, or anytime"""
  mealInfo: String

  """[mon, tue, wed, thu, fri, sat, sun] || []"""
  daysOfWeek: [String!]

  """[1,15] - the days the task should trigger on"""
  daysOfMonth: [Int!]
}

"""Autogenerated return type of TaskCreate."""
type TaskCreatePayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

type TaskInterval implements ActiveRecord & Period {
  beginAt: Int
  beginAtIso: String
  beginEpoch: Int @deprecated(reason: "Use beginAt instead")
  compliance: Float
  complianceScore: ComplianceScore
  createdAt: Int
  createdAtIso: String
  dataValues: [DataValue!]
  endAt: Int
  endAtIso: String
  endEpoch: Int @deprecated(reason: "Use endAt instead")

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  forceCompleted: Boolean
  forceCompletedAt: Int
  forceCompletedAtIso: ISO8601DateTime
  id: ID
  period: [Int!]
  periodDurationDays: Int
  periodDurationMins: Int
  periodDurationSecs: Int
  periodIso: [String!]
  task: Task
  taskId: ID
  total: Float
  updatedAt: Int
  updatedAtIso: String
}

input TaskIntervalCompleteInput {
  """Task Interval ID"""
  interval: ID!

  """Compliance % [default: 100.0]"""
  compliance: Float
}

"""Autogenerated return type of TaskIntervalComplete."""
type TaskIntervalCompletePayload {
  errors: [Error!]
  result: TaskInterval
  success: Boolean
}

"""The connection type for TaskInterval."""
type TaskIntervalConnection {
  """A list of edges."""
  edges: [TaskIntervalEdge]

  """A list of nodes."""
  nodes: [TaskInterval]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TaskIntervalEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: TaskInterval
}

"""Autogenerated return type of TaskRemove."""
type TaskRemovePayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

input TaskUpdateInput {
  """Task.ID"""
  id: ID
  key: String
  title: String
  desc: String

  """at_least, at_most, maintain"""
  testType: String

  """Units the values are in"""
  unit: String

  """min_value, max_value - max is optional"""
  data: [Float!]

  """day, week, month"""
  interval: String

  """[morning, afternoon, evening] || [anytime]"""
  timeFrames: [String!]

  """before, after, or anytime"""
  mealInfo: String

  """[mon, tue, wed, thu, fri, sat, sun] || []"""
  daysOfWeek: [String!]

  """[1,15] - the days the task should trigger on"""
  daysOfMonth: [Int!]
}

"""Autogenerated return type of TaskUpdate."""
type TaskUpdatePayload {
  errors: [Error!]
  success: Boolean
  task: Task
}

type User implements ActiveRecord & Addresses & Attachments & CarePlans & HealthSnaps & Preferences & Rides {
  abbrName: String
  addresses: [AddressesStreet!]
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  carePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
  channelId: String
  contributingCarePlans(
    ids: [ID!]

    """draft,pending,active,cancelled,completed"""
    status: [String!]
    order: String
  ): [CarePlan!]
  conversation(
    """ID of specific Conversation"""
    id: ID
  ): MessagingConversation
  conversations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """[:pending, :active, :archived, :removed] Default: ['active','pending']"""
    status: [String!]
  ): MessagingConversationConnection
  createdAt: Int
  createdAtIso: String
  dataSources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    name: String
    identifier: String
  ): DataValueSourceConnection
  dataValues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    metrics: [String!]!

    """DataValues since this time"""
    sinceEpoch: Int

    """DataValues before this time (default: NOW)"""
    untilEpoch: Int
    order: String
  ): DataValueConnection
  devices(
    """[pending, registerd, unregistered]; default[all]"""
    status: String
  ): [Device!]
  disabilities: String

  """Date of Birth"""
  dob: String
  email(label: String): String
  emails: [AddressesEmail!]

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserEventConnection
  firstName: String
  fullName: String
  healthNote(id: ID): HealthNote
  healthNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """ID of organization to filter notes by"""
    organization: ID
    search: String
    order: String
    kind: String

    """open || closed; default[closed]"""
    status: [String!]

    """Return only notes created by this userID"""
    createdBy: ID
  ): HealthNoteConnection
  healthOrder(id: ID): HealthNote
  healthOrders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """ID of organization to filter orders by"""
    organization: ID
    search: String
    order: String
    kind: String

    """open || closed; default[closed]"""
    status: [String!]

    """Return only orders created by this userID"""
    createdBy: ID
  ): HealthOrderConnection
  healthSnaps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]

    """open, closed, cancelled"""
    status: [String!]
    kind: String
    kinds: [String!]
    order: String
  ): HealthSnapConnection
  hipaaName: String
  id: ID
  initials: String
  insuranceCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    order: String

    """Date cards must be active on. default[all_dates]"""
    activeOn: String
  ): InsuranceCardConnection
  lastLoginAt: String
  lastName: String
  latestData(metrics: [String!]): [DataValue!]
  mainLanguage: String @deprecated(reason: "Use Preferences instead")
  manualInsights(definitions: [InsightManualInput!]): [InsightManual!]
  middleName: String
  notes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserNoteConnection
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Show notifications since this time (int or ISO8601)"""
    since: String
  ): UserNotificationConnection
  organizations: [Organization!]
  permissions: JSON
  personAppointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    organization: ID
    provider: ID
    service: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
  ): AppointmentConnection
  phones: [AddressesPhone!]

  """Preferences"""
  preferences(
    """Prefix to filter preferences by"""
    prefix: String
  ): [Preference!]
  profileColor: String @deprecated(reason: "Use Preferences instead")
  providerAppointments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    organization: ID
    person: ID
    service: ID
    status: [String!]
    kind: [String!]
    startEpoch: Int
    endEpoch: Int
    ordering: String
  ): AppointmentConnection
  queueEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ServiceQueueEntryConnection
  ride(id: ID): RideRequest
  rides(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    statuses: [String!]

    """default[-scheduled_at]"""
    order: String
  ): RideRequestConnection
  roleNames: [String!]
  roles: [Role!]
  services: [Service!]
  ssn: String
  suffix: String
  tasks(
    ids: [ID!]

    """pending, active, cancelled, completed"""
    status: [String!]
    order: String
  ): [Task!]
  tasksTodo: [Task!]
  token: String
  updatedAt: Int
  updatedAtIso: String
  urls: [AddressesURL!]
  uuid: String
  workoutPlan(
    """ID of the plan to retrieve"""
    id: ID
  ): WorkoutPlan
  workoutPlans(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Status of the plans to retrieve"""
    status: String
  ): WorkoutPlanConnection
  workoutPlansCreated(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Status of the plans to retrieve"""
    status: String
  ): WorkoutPlanConnection
  workoutRoutine(id: ID!): WorkoutRoutine
  workoutRoutines(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Status of the routines to retrieve"""
    status: String
  ): WorkoutRoutineConnection
}

input UserAddDataInput {
  """User to add data to [default: viewing || current]"""
  user: ID

  """The kind of HS to create for this data"""
  kind: String

  """Name for the auto-created HealthSnap"""
  name: String
  beginEpoch: Int
  data: [AnswerInput!]
}

"""Autogenerated return type of UserAddData."""
type UserAddDataPayload {
  errors: [Error!]
  success: Boolean
  user: User
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input UserCreateInput {
  id: ID
  firstName: String!
  middleName: String
  lastName: String!

  """Date of Birth"""
  dob: String!

  """Last 4 of SSN"""
  ssn: String

  """Default(en)"""
  mainLanguage: String
  profileColor: String
  gender: String
  encryptedSsn: String
  orgId: ID
  roles: [RoleInput!]
  phones: [AddressesPhoneInput!]
  emails: [AddressesEmailInput!]
  addresses: [AddressesStreetInput!]
  attachments: [AttachmentInput!]
  password: String
  disabilities: String
}

"""Autogenerated return type of UserCreate."""
type UserCreatePayload {
  errors: [Error!]
  success: Boolean
  user: User
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

type UserEvent implements ActiveRecord {
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  occurredAt: Int
  occurredAtIso: ISO8601DateTime
  status: String
  subjectId: ID
  subjectType: String
  title: String
  updatedAt: Int
  updatedAtIso: String
  user: User
}

"""The connection type for UserEvent."""
type UserEventConnection {
  """A list of edges."""
  edges: [UserEventEdge]

  """A list of nodes."""
  nodes: [UserEvent]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input UserEventCreateInput {
  """ID of User to add event to"""
  user: ID!

  """Title of the note"""
  title: String!

  """ID of the subject"""
  subjectId: ID
  subjectType: String
}

"""Autogenerated return type of UserEventCreate."""
type UserEventCreatePayload {
  errors: [Error!]
  result: UserEvent
  success: Boolean
}

"""An edge in a connection."""
type UserEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: UserEvent
}

input UserEventMarkReadInput {
  """ID of Event to mark as read"""
  event: ID
}

"""Autogenerated return type of UserEventMarkRead."""
type UserEventMarkReadPayload {
  errors: [Error!]
  result: UserEvent
  success: Boolean
}

input UserFindOrCreateInput {
  firstName: String!
  middleName: String
  lastName: String!

  """Date of Birth"""
  dob: String!

  """Last 4 of SSN"""
  ssn: String

  """Default(en)"""
  mainLanguage: String
  profileColor: String
  gender: String
  encryptedSsn: String
}

"""Autogenerated return type of UserFindOrCreate."""
type UserFindOrCreatePayload {
  errors: [Error!]
  success: Boolean
  user: User
}

input UserLoginAuth0Input {
  auth0Jwt: String!
}

"""Autogenerated return type of UserLoginAuth0."""
type UserLoginAuth0Payload {
  errors: [Error!]
  newRecord: Boolean
  success: Boolean
  user: User
}

input UserLoginInput {
  email: String!
  orgId: ID
  role: String
  password: String
}

"""Autogenerated return type of UserLogin."""
type UserLoginPayload {
  errors: [Error!]
  success: Boolean
  user: User
}

input UserLookupInput {
  """YYYY-MM-DD || YYYY/MM/DD"""
  dob: String!
  lastName: String!
  middleName: String
  firstName: String
  ssn: String
}

type UserNote implements ActiveRecord {
  author: User
  body: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  isPrivate: Boolean
  medicalBody: String
  updatedAt: Int
  updatedAtIso: String
  user: User
}

input UserNoteAddInput {
  """ID of User to add note to"""
  user: ID

  """Body of the note"""
  body: String

  """Medical body of note"""
  medicalBody: String

  """Private notes can only be seen by the author. Default[false]"""
  isPrivate: Boolean
}

"""Autogenerated return type of UserNoteAdd."""
type UserNoteAddPayload {
  errors: [Error!]
  note: UserNote
  success: Boolean
}

"""The connection type for UserNote."""
type UserNoteConnection {
  """A list of edges."""
  edges: [UserNoteEdge]

  """A list of nodes."""
  nodes: [UserNote]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: UserNote
}

input UserNoteUpdateInput {
  """ID of note"""
  id: ID!

  """Body of the note"""
  body: String

  """Medical body of note"""
  medicalBody: String

  """Private notes can only be seen by the author. Default[false]"""
  isPrivate: Boolean
}

"""Autogenerated return type of UserNoteUpdate."""
type UserNoteUpdatePayload {
  errors: [Error!]
  note: UserNote
  success: Boolean
}

type UserNotification implements ActiveRecord {
  content: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  readAt(userId: ID): Int
  readAtIso(userId: ID): ISO8601DateTime
  subject: String
  updatedAt: Int
  updatedAtIso: String
}

"""The connection type for UserNotification."""
type UserNotificationConnection {
  """A list of edges."""
  edges: [UserNotificationEdge]

  """A list of nodes."""
  nodes: [UserNotification]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input UserNotificationCreateInput {
  """
  ID of User to send a specific notification to [Goes to everyone if set to nil]
  """
  user: ID
  subject: String!
  content: String!
}

"""Autogenerated return type of UserNotificationCreate."""
type UserNotificationCreatePayload {
  errors: [Error!]
  result: UserNotification
  success: Boolean
}

"""An edge in a connection."""
type UserNotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: UserNotification
}

input UserNotificationMarkReadInput {
  """ID of Notification to update"""
  id: ID

  """ID of User that read the notification"""
  user: ID
}

"""Autogenerated return type of UserNotificationMarkRead."""
type UserNotificationMarkReadPayload {
  errors: [Error!]
  result: UserNotification
  success: Boolean
}

"""Autogenerated return type of UserNotificationRemove."""
type UserNotificationRemovePayload {
  errors: [Error!]
  result: UserNotification
  success: Boolean
}

input UserNotificationUpdateInput {
  """ID of Notification to update"""
  id: ID
  subject: String
  content: String
}

"""Autogenerated return type of UserNotificationUpdate."""
type UserNotificationUpdatePayload {
  errors: [Error!]
  result: UserNotification
  success: Boolean
}

"""Autogenerated return type of UserRequestPasswordReset."""
type UserRequestPasswordResetPayload {
  errors: [Error!]
  success: Boolean
}

input UserResetPasswordInput {
  """reset password token"""
  token: String!

  """new password"""
  password: String!
}

"""Autogenerated return type of UserResetPassword."""
type UserResetPasswordPayload {
  errors: [Error!]
  success: Boolean
}

input UserUpdateInput {
  id: ID!
  firstName: String
  middleName: String
  lastName: String

  """Default(en)"""
  mainLanguage: String

  """Date of Birth"""
  dob: String

  """Last 4 of SSN"""
  ssn: String

  """Full SSN (unencrypted)"""
  encryptedSsn: String
  gender: String
  profileColor: String
  roles: [RoleInput!]
  phones: [AddressesPhoneInput!]
  emails: [AddressesEmailInput!]
  addresses: [AddressesStreetInput!]
  attachments: [AttachmentInput!]
  preferences: [PreferenceInput!]

  """New Password"""
  password: String
  disabilities: String
}

"""Autogenerated return type of UserUpdate."""
type UserUpdatePayload {
  errors: [Error!]
  success: Boolean
  user: User
}

type Viewing {
  org: Organization
  user: User
}

type WorkoutActivity implements ActiveRecord & Attachments {
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  category: WorkoutCategory
  categoryCode: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  key: String
  name: String
  updatedAt: Int
  updatedAtIso: String
  uses: [String!]
  videoUrl: String
}

"""The connection type for WorkoutActivity."""
type WorkoutActivityConnection {
  """A list of edges."""
  edges: [WorkoutActivityEdge]

  """A list of nodes."""
  nodes: [WorkoutActivity]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input WorkoutActivityCreateInput {
  categoryCode: ID!
  key: ID!
  name: String!
  videoUrl: String
  attachments: [AttachmentInput!]
}

"""Autogenerated return type of WorkoutActivityCreate."""
type WorkoutActivityCreatePayload {
  errors: [Error!]
  result: WorkoutActivity
  success: Boolean
}

"""An edge in a connection."""
type WorkoutActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkoutActivity
}

input WorkoutActivityUpdateInput {
  id: ID!
  categoryCode: ID
  key: ID
  name: String
  videoUrl: String
  attachments: [AttachmentInput!]
}

"""Autogenerated return type of WorkoutActivityUpdate."""
type WorkoutActivityUpdatePayload {
  errors: [Error!]
  result: WorkoutActivity
  success: Boolean
}

type WorkoutCategory implements ActiveRecord {
  activities: [WorkoutActivity!]
  code: String
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  key: String
  name: String
  status: String
  updatedAt: Int
  updatedAtIso: String
  uses: [String!]
}

"""The connection type for WorkoutCategory."""
type WorkoutCategoryConnection {
  """A list of edges."""
  edges: [WorkoutCategoryEdge]

  """A list of nodes."""
  nodes: [WorkoutCategory]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input WorkoutCategoryCreateInput {
  code: ID!
  name: String!
  uses: [String!]
}

"""Autogenerated return type of WorkoutCategoryCreate."""
type WorkoutCategoryCreatePayload {
  errors: [Error!]
  result: WorkoutCategory
  success: Boolean
}

"""An edge in a connection."""
type WorkoutCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkoutCategory
}

input WorkoutCategoryUpdateInput {
  code: ID!
  name: String
  uses: [String!]
  active: Boolean
}

"""Autogenerated return type of WorkoutCategoryUpdate."""
type WorkoutCategoryUpdatePayload {
  errors: [Error!]
  result: WorkoutCategory
  success: Boolean
}

type WorkoutPlan implements ActiveRecord {
  createdAt: Int
  createdAtIso: String
  creator: User
  creatorId: ID

  """Description of the workout plan"""
  desc: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  frequency: String
  groups: [WorkoutPlanGroup!]
  id: ID
  status: String
  title: String
  updatedAt: Int
  updatedAtIso: String
  user: User
  userId: ID
  uuid: ID
}

"""The connection type for WorkoutPlan."""
type WorkoutPlanConnection {
  """A list of edges."""
  edges: [WorkoutPlanEdge]

  """A list of nodes."""
  nodes: [WorkoutPlan]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input WorkoutPlanCreateInput {
  user: ID!
  title: String
  desc: String
  frequency: String
}

"""Autogenerated return type of WorkoutPlanCreate."""
type WorkoutPlanCreatePayload {
  errors: [Error!]
  result: WorkoutPlan
  success: Boolean
}

"""An edge in a connection."""
type WorkoutPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkoutPlan
}

type WorkoutPlanGroup implements ActiveRecord {
  activities: [WorkoutActivity!]
  activityLinks: [WorkoutPlanGroupActivity!]
  createdAt: Int
  createdAtIso: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  plan: WorkoutPlan
  planId: ID
  position: Int
  status: String
  title: String
  updatedAt: Int
  updatedAtIso: String
}

type WorkoutPlanGroupActivity implements ActiveRecord {
  activity: WorkoutActivity
  activityId: ID
  alternateActivities: [WorkoutPlanGroupActivity!]
  createdAt: Int
  createdAtIso: String
  distance: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  isAlternate: Boolean
  isMain: Boolean
  mainActivity: WorkoutPlanGroupActivity
  mainActivityId: ID
  planGroup: WorkoutPlanGroup
  planGroupId: ID
  position: Int
  reps: Int

  """Rate of Perceived Exertion (BORG Scale: 6-20)"""
  rpe: Int
  sets: [WorkoutSet!]
  starred: Boolean
  starredAt: Int
  starredAtIso: ISO8601DateTime
  time: String
  updatedAt: Int
  updatedAtIso: String
}

input WorkoutPlanGroupActivityCreateInput {
  planGroup: ID!
  activity: ID!
  position: Int
  reps: Int
  time: String

  """Rate of Perceived Exertion (BORG Scale: 6-20)"""
  rpe: Int
  distance: String
  sets: [WorkoutSetInput!]
  starred: Boolean
  mainActivity: ID
}

"""Autogenerated return type of WorkoutPlanGroupActivityCreate."""
type WorkoutPlanGroupActivityCreatePayload {
  errors: [Error!]
  result: WorkoutPlanGroupActivity
  success: Boolean
}

"""Autogenerated return type of WorkoutPlanGroupActivityRemove."""
type WorkoutPlanGroupActivityRemovePayload {
  errors: [Error!]
  result: WorkoutPlanGroupActivity
  success: Boolean
}

input WorkoutPlanGroupActivityUpdateInput {
  activity: ID!
  position: Int
  reps: Int
  time: String

  """Rate of Perceived Exertion (BORG Scale: 6-20)"""
  rpe: Int
  distance: String
  sets: [WorkoutSetInput!] = null
  starred: Boolean
  mainActivity: ID
}

"""Autogenerated return type of WorkoutPlanGroupActivityUpdate."""
type WorkoutPlanGroupActivityUpdatePayload {
  errors: [Error!]
  result: WorkoutPlanGroupActivity
  success: Boolean
}

input WorkoutPlanGroupCreateInput {
  plan: ID!
  position: Int
  title: String
  status: String
}

"""Autogenerated return type of WorkoutPlanGroupCreate."""
type WorkoutPlanGroupCreatePayload {
  errors: [Error!]
  result: WorkoutPlanGroup
  success: Boolean
}

"""Autogenerated return type of WorkoutPlanGroupRemove."""
type WorkoutPlanGroupRemovePayload {
  errors: [Error!]
  result: WorkoutPlanGroup
  success: Boolean
}

input WorkoutPlanGroupUpdateInput {
  group: ID!
  position: Int
  title: String
  status: String
}

"""Autogenerated return type of WorkoutPlanGroupUpdate."""
type WorkoutPlanGroupUpdatePayload {
  errors: [Error!]
  result: WorkoutPlanGroup
  success: Boolean
}

"""Autogenerated return type of WorkoutPlanRemove."""
type WorkoutPlanRemovePayload {
  errors: [Error!]
  result: WorkoutPlan
  success: Boolean
}

input WorkoutPlanUpdateInput {
  plan: ID!
  title: String
  desc: String
  frequency: String

  """activate, deactivate, archive, cancel, complete"""
  action: String
}

"""Autogenerated return type of WorkoutPlanUpdate."""
type WorkoutPlanUpdatePayload {
  errors: [Error!]
  result: WorkoutPlan
  success: Boolean
}

type WorkoutRoutine implements ActiveRecord & Attachments {
  attachment(id: ID): Attachment
  attachments(labels: [String!]): [Attachment!]
  createdAt: Int
  createdAtIso: String
  creator: User
  creatorId: ID
  description: String

  """The number of days"""
  duration: Int

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  focus: String
  id: ID
  plans(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    status: String
  ): WorkoutPlanConnection
  requirements: [String!]
  status: String
  title: String
  updatedAt: Int
  updatedAtIso: String
  user: User
  userId: ID
  uuid: ID
}

"""The connection type for WorkoutRoutine."""
type WorkoutRoutineConnection {
  """A list of edges."""
  edges: [WorkoutRoutineEdge]

  """A list of nodes."""
  nodes: [WorkoutRoutine]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input WorkoutRoutineCreateInput {
  user: ID!
  title: String
  org: ID
  creator: ID
  duration: Int
  attachments: [AttachmentInput!]
  focus: String
  description: String
  requirements: [String!]
}

"""Autogenerated return type of WorkoutRoutineCreate."""
type WorkoutRoutineCreatePayload {
  errors: [Error!]
  result: WorkoutRoutine
  success: Boolean
}

"""An edge in a connection."""
type WorkoutRoutineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkoutRoutine
}

input WorkoutRoutinePlanAddInput {
  id: ID!
  plan: ID!
}

"""Autogenerated return type of WorkoutRoutinePlanAdd."""
type WorkoutRoutinePlanAddPayload {
  errors: [Error!]
  result: WorkoutRoutine
  success: Boolean
}

input WorkoutRoutinePlanRemoveInput {
  id: ID!
  plan: ID!
}

"""Autogenerated return type of WorkoutRoutinePlanRemove."""
type WorkoutRoutinePlanRemovePayload {
  errors: [Error!]
  result: WorkoutRoutine
  success: Boolean
}

"""Autogenerated return type of WorkoutRoutineRemove."""
type WorkoutRoutineRemovePayload {
  errors: [Error!]
  result: WorkoutRoutine
  success: Boolean
}

input WorkoutRoutineUpdateInput {
  id: ID!
  title: String
  duration: Int

  """activate, deactivate, archive, cancel, complete"""
  action: String
  attachments: [AttachmentInput!]
  focus: String
  description: String
  requirements: [String!]
}

"""Autogenerated return type of WorkoutRoutineUpdate."""
type WorkoutRoutineUpdatePayload {
  errors: [Error!]
  result: WorkoutRoutine
  success: Boolean
}

type WorkoutSet implements ActiveRecord {
  activity: WorkoutActivity
  createdAt: Int
  createdAtIso: String
  distance: String

  """Reasons the object couldn't be created or updated"""
  errors: [String!]
  id: ID
  reps: Int
  rest: String

  """Rate of Perceived Exertion (BORG Scale: 6-20)"""
  rpe: Int
  status: String
  time: String
  updatedAt: Int
  updatedAtIso: String
  weight: String
}

input WorkoutSetInput {
  reps: Int

  """Rate of Perceived Exertion (BORG Scale: 6-20)"""
  rpe: Int
  time: String
  distance: String
  weight: String
  rest: String
  status: String
}